/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOCobros : DATACONN0_BaseData
	{
		#region member variables
		protected Int32? _nro;
		protected Int32? _idCont;
		protected string _nombreApellido;
		protected decimal? _monto;
		protected DateTime? _fecha;
		protected TimeSpan? _hora;
		protected string _cie;
		#endregion

		#region class methods
		public DAOCobros()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Cobros based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOCobros
		///</returns>
		///<parameters>
		///Int32? nro
		///</parameters>
		public static DAOCobros SelectOne(Int32? nro)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Cobros");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)nro?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOCobros retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOCobros();
					retObj._nro					 = Convert.IsDBNull(dt.Rows[0]["Nro"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Nro"];
					retObj._idCont					 = Convert.IsDBNull(dt.Rows[0]["IdCont"]) ? (Int32?)null : (Int32?)dt.Rows[0]["IdCont"];
					retObj._nombreApellido					 = Convert.IsDBNull(dt.Rows[0]["NombreApellido"]) ? null : (string)dt.Rows[0]["NombreApellido"];
					retObj._monto					 = Convert.IsDBNull(dt.Rows[0]["Monto"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Monto"];
					retObj._fecha					 = Convert.IsDBNull(dt.Rows[0]["Fecha"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["Fecha"];
					retObj._hora					 = Convert.IsDBNull(dt.Rows[0]["Hora"]) ? (TimeSpan?)null : (TimeSpan?)dt.Rows[0]["Hora"];
					retObj._cie					 = Convert.IsDBNull(dt.Rows[0]["CIE"]) ? null : (string)dt.Rows[0]["CIE"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Cobros based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_nro?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Cobros based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOCobros.
		///</returns>
		///<parameters>
		///Int32? idCont
		///</parameters>
		public static List<DAOCobros> SelectAllByIdCont(Int32? idCont)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_SelectAllByIdCont;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Cobros");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdCont", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idCont?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOCobros> objList = new List<DAOCobros>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCobros retObj = new DAOCobros();
						retObj._nro					 = Convert.IsDBNull(row["Nro"]) ? (Int32?)null : (Int32?)row["Nro"];
						retObj._idCont					 = Convert.IsDBNull(row["IdCont"]) ? (Int32?)null : (Int32?)row["IdCont"];
						retObj._nombreApellido					 = Convert.IsDBNull(row["NombreApellido"]) ? null : (string)row["NombreApellido"];
						retObj._monto					 = Convert.IsDBNull(row["Monto"]) ? (decimal?)null : (decimal?)row["Monto"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						retObj._hora					 = Convert.IsDBNull(row["Hora"]) ? (TimeSpan?)null : (TimeSpan?)row["Hora"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? idCont
		///</parameters>
		public static Int32 SelectAllByIdContCount(Int32? idCont)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_SelectAllByIdContCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdCont", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idCont?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Cobros with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? idCont
		///</parameters>
		public static void DeleteAllByIdCont(DATACONN0_TxConnectionProvider connectionProvider, Int32? idCont)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_DeleteAllByIdCont;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdCont", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idCont?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Cobros based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOCobros.
		///</returns>
		///<parameters>
		///string cie
		///</parameters>
		public static List<DAOCobros> SelectAllByCie(string cie)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_SelectAllByCie;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Cobros");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOCobros> objList = new List<DAOCobros>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCobros retObj = new DAOCobros();
						retObj._nro					 = Convert.IsDBNull(row["Nro"]) ? (Int32?)null : (Int32?)row["Nro"];
						retObj._idCont					 = Convert.IsDBNull(row["IdCont"]) ? (Int32?)null : (Int32?)row["IdCont"];
						retObj._nombreApellido					 = Convert.IsDBNull(row["NombreApellido"]) ? null : (string)row["NombreApellido"];
						retObj._monto					 = Convert.IsDBNull(row["Monto"]) ? (decimal?)null : (decimal?)row["Monto"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						retObj._hora					 = Convert.IsDBNull(row["Hora"]) ? (TimeSpan?)null : (TimeSpan?)row["Hora"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string cie
		///</parameters>
		public static Int32 SelectAllByCieCount(string cie)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_SelectAllByCieCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Cobros with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, string cie
		///</parameters>
		public static void DeleteAllByCie(DATACONN0_TxConnectionProvider connectionProvider, string cie)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_DeleteAllByCie;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Cobros
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_nro?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdCont", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idCont?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@NombreApellido", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_nombreApellido?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Monto", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_monto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fecha?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Hora", SqlDbType.Time, 5, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_hora?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_cie?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Cobros
		///</Summary>
		///<returns>
		///List-DAOCobros.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOCobros> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Cobros");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOCobros> objList = new List<DAOCobros>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCobros retObj = new DAOCobros();
						retObj._nro					 = Convert.IsDBNull(row["Nro"]) ? (Int32?)null : (Int32?)row["Nro"];
						retObj._idCont					 = Convert.IsDBNull(row["IdCont"]) ? (Int32?)null : (Int32?)row["IdCont"];
						retObj._nombreApellido					 = Convert.IsDBNull(row["NombreApellido"]) ? null : (string)row["NombreApellido"];
						retObj._monto					 = Convert.IsDBNull(row["Monto"]) ? (decimal?)null : (decimal?)row["Monto"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						retObj._hora					 = Convert.IsDBNull(row["Hora"]) ? (TimeSpan?)null : (TimeSpan?)row["Hora"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOCobros.
		///</returns>
		///<parameters>
		///DAOCobros daoCobros
		///</parameters>
		public static List<DAOCobros> SelectAllBySearchFields(DAOCobros daoCobros)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Cobros");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoCobros.Nro?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdCont", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoCobros.IdCont?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@NombreApellido", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCobros.NombreApellido?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Monto", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoCobros.Monto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCobros.Fecha?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Hora", SqlDbType.Time, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCobros.Hora?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCobros.Cie?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOCobros> objList = new List<DAOCobros>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCobros retObj = new DAOCobros();
						retObj._nro					 = Convert.IsDBNull(row["Nro"]) ? (Int32?)null : (Int32?)row["Nro"];
						retObj._idCont					 = Convert.IsDBNull(row["IdCont"]) ? (Int32?)null : (Int32?)row["IdCont"];
						retObj._nombreApellido					 = Convert.IsDBNull(row["NombreApellido"]) ? null : (string)row["NombreApellido"];
						retObj._monto					 = Convert.IsDBNull(row["Monto"]) ? (decimal?)null : (decimal?)row["Monto"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						retObj._hora					 = Convert.IsDBNull(row["Hora"]) ? (TimeSpan?)null : (TimeSpan?)row["Hora"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOCobros daoCobros
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOCobros daoCobros)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoCobros.Nro?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdCont", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoCobros.IdCont?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@NombreApellido", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCobros.NombreApellido?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Monto", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoCobros.Monto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCobros.Fecha?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Hora", SqlDbType.Time, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCobros.Hora?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCobros.Cie?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Cobros based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCobros_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_nro?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdCont", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idCont?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@NombreApellido", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_nombreApellido?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Monto", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_monto?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fecha?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Hora", SqlDbType.Time, 5, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_hora?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_cie?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Nro
		{
			get
			{
				return _nro;
			}
			set
			{
				_nro = value;
			}
		}

		public Int32? IdCont
		{
			get
			{
				return _idCont;
			}
			set
			{
				_idCont = value;
			}
		}

		public string NombreApellido
		{
			get
			{
				return _nombreApellido;
			}
			set
			{
				_nombreApellido = value;
			}
		}

		public decimal? Monto
		{
			get
			{
				return _monto;
			}
			set
			{
				_monto = value;
			}
		}

		public DateTime? Fecha
		{
			get
			{
				return _fecha;
			}
			set
			{
				_fecha = value;
			}
		}

		public TimeSpan? Hora
		{
			get
			{
				return _hora;
			}
			set
			{
				_hora = value;
			}
		}

		public string Cie
		{
			get
			{
				return _cie;
			}
			set
			{
				_cie = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprCobros_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Nro]
			,[IdCont]
			,[NombreApellido]
			,[Monto]
			,[Fecha]
			,[Hora]
			,[CIE]
			FROM [dbo].[Cobros]
			WHERE 
			[Nro] = @Nro
			";

		internal static string ctprCobros_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Cobros]
			WHERE 
			[Nro] = @Nro
			";

		internal static string ctprCobros_SelectAllByIdCont = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Nro]
			,[IdCont]
			,[NombreApellido]
			,[Monto]
			,[Fecha]
			,[Hora]
			,[CIE]
			FROM [dbo].[Cobros]
			WHERE 
			[IdCont] = @IdCont
			";

		internal static string ctprCobros_SelectAllByIdContCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Cobros]
			WHERE 
			[IdCont] = @IdCont
			";

		internal static string ctprCobros_DeleteAllByIdCont = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Cobros]
			WHERE 
			[IdCont] = @IdCont
			";

		internal static string ctprCobros_SelectAllByCie = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Nro]
			,[IdCont]
			,[NombreApellido]
			,[Monto]
			,[Fecha]
			,[Hora]
			,[CIE]
			FROM [dbo].[Cobros]
			WHERE 
			[CIE] = @CIE
			";

		internal static string ctprCobros_SelectAllByCieCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Cobros]
			WHERE 
			[CIE] = @CIE
			";

		internal static string ctprCobros_DeleteAllByCie = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Cobros]
			WHERE 
			[CIE] = @CIE
			";

		internal static string ctprCobros_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Cobros]
			(
			[Nro]
			,[IdCont]
			,[NombreApellido]
			,[Monto]
			,[Fecha]
			,[Hora]
			,[CIE]
			)
			VALUES
			(
			@Nro
			,@IdCont
			,@NombreApellido
			,@Monto
			,@Fecha
			,@Hora
			,@CIE
			)
			SELECT 
			@Nro = [Nro]
			,@IdCont = [IdCont]
			,@NombreApellido = [NombreApellido]
			,@Monto = [Monto]
			,@Fecha = [Fecha]
			,@Hora = [Hora]
			,@CIE = [CIE]
			FROM [dbo].[Cobros]
			WHERE 
			[Nro] = @Nro
			";

		internal static string ctprCobros_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Nro]
			,[IdCont]
			,[NombreApellido]
			,[Monto]
			,[Fecha]
			,[Hora]
			,[CIE]
			FROM [dbo].[Cobros]
			";

		internal static string ctprCobros_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Cobros]
			";

		internal static string ctprCobros_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Nro],
			[IdCont],
			[NombreApellido],
			[Monto],
			[Fecha],
			[Hora],
			[CIE]
			FROM [dbo].[Cobros]
			WHERE 
			([Nro] LIKE @Nro OR @Nro is null)
			AND ([IdCont] LIKE @IdCont OR @IdCont is null)
			AND ([NombreApellido] LIKE @NombreApellido OR @NombreApellido is null)
			AND ([Monto] LIKE @Monto OR @Monto is null)
			AND ([Fecha] LIKE @Fecha OR @Fecha is null)
			AND ([Hora] LIKE @Hora OR @Hora is null)
			AND ([CIE] LIKE @CIE OR @CIE is null)
			";

		internal static string ctprCobros_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[Cobros]
			WHERE 
			([Nro] LIKE @Nro OR @Nro is null)
			AND ([IdCont] LIKE @IdCont OR @IdCont is null)
			AND ([NombreApellido] LIKE @NombreApellido OR @NombreApellido is null)
			AND ([Monto] LIKE @Monto OR @Monto is null)
			AND ([Fecha] LIKE @Fecha OR @Fecha is null)
			AND ([Hora] LIKE @Hora OR @Hora is null)
			AND ([CIE] LIKE @CIE OR @CIE is null)
			";

		internal static string ctprCobros_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Cobros]
			SET
			[IdCont] = @IdCont
			,[NombreApellido] = @NombreApellido
			,[Monto] = @Monto
			,[Fecha] = @Fecha
			,[Hora] = @Hora
			,[CIE] = @CIE
			WHERE 
			[Nro] = @Nro
			SELECT 
			@Nro = [Nro]
			,@IdCont = [IdCont]
			,@NombreApellido = [NombreApellido]
			,@Monto = [Monto]
			,@Fecha = [Fecha]
			,@Hora = [Hora]
			,@CIE = [CIE]
			FROM [dbo].[Cobros]
			WHERE 
			[Nro] = @Nro
			";

	}
}
#endregion
