/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOOrdenTrabajo : DATACONN0_BaseData
	{
		#region member variables
		protected string _cie;
		protected Int32? _idEven;
		protected string _descripcion;
		protected DateTime? _fechaO;
		protected DateTime? _fechaE;
		protected Int64? _nro;
		protected string _estado;
		protected Int16? _porcentaje;
		#endregion

		#region class methods
		public DAOOrdenTrabajo()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table OrdenTrabajo based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOOrdenTrabajo
		///</returns>
		///<parameters>
		///string cie, Int32? idEven
		///</parameters>
		public static DAOOrdenTrabajo SelectOne(string cie, Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrdenTrabajo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOOrdenTrabajo retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOOrdenTrabajo();
					retObj._cie					 = Convert.IsDBNull(dt.Rows[0]["CIE"]) ? null : (string)dt.Rows[0]["CIE"];
					retObj._idEven					 = Convert.IsDBNull(dt.Rows[0]["IdEven"]) ? (Int32?)null : (Int32?)dt.Rows[0]["IdEven"];
					retObj._descripcion					 = Convert.IsDBNull(dt.Rows[0]["Descripcion"]) ? null : (string)dt.Rows[0]["Descripcion"];
					retObj._fechaO					 = Convert.IsDBNull(dt.Rows[0]["FechaO"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["FechaO"];
					retObj._fechaE					 = Convert.IsDBNull(dt.Rows[0]["FechaE"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["FechaE"];
					retObj._nro					 = Convert.IsDBNull(dt.Rows[0]["Nro"]) ? (Int64?)null : (Int64?)dt.Rows[0]["Nro"];
					retObj._estado					 = Convert.IsDBNull(dt.Rows[0]["Estado"]) ? null : (string)dt.Rows[0]["Estado"];
					retObj._porcentaje					 = Convert.IsDBNull(dt.Rows[0]["Porcentaje"]) ? (Int16?)null : (Int16?)dt.Rows[0]["Porcentaje"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table OrdenTrabajo based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OrdenTrabajo based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOOrdenTrabajo.
		///</returns>
		///<parameters>
		///string cie
		///</parameters>
		public static List<DAOOrdenTrabajo> SelectAllByCie(string cie)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectAllByCie;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrdenTrabajo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOOrdenTrabajo> objList = new List<DAOOrdenTrabajo>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrdenTrabajo retObj = new DAOOrdenTrabajo();
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						retObj._fechaO					 = Convert.IsDBNull(row["FechaO"]) ? (DateTime?)null : (DateTime?)row["FechaO"];
						retObj._fechaE					 = Convert.IsDBNull(row["FechaE"]) ? (DateTime?)null : (DateTime?)row["FechaE"];
						retObj._nro					 = Convert.IsDBNull(row["Nro"]) ? (Int64?)null : (Int64?)row["Nro"];
						retObj._estado					 = Convert.IsDBNull(row["Estado"]) ? null : (string)row["Estado"];
						retObj._porcentaje					 = Convert.IsDBNull(row["Porcentaje"]) ? (Int16?)null : (Int16?)row["Porcentaje"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string cie
		///</parameters>
		public static Int32 SelectAllByCieCount(string cie)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectAllByCieCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OrdenTrabajo with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, string cie
		///</parameters>
		public static void DeleteAllByCie(DATACONN0_TxConnectionProvider connectionProvider, string cie)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_DeleteAllByCie;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OrdenTrabajo based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOOrdenTrabajo.
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static List<DAOOrdenTrabajo> SelectAllByIdEven(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectAllByIdEven;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrdenTrabajo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOOrdenTrabajo> objList = new List<DAOOrdenTrabajo>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrdenTrabajo retObj = new DAOOrdenTrabajo();
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						retObj._fechaO					 = Convert.IsDBNull(row["FechaO"]) ? (DateTime?)null : (DateTime?)row["FechaO"];
						retObj._fechaE					 = Convert.IsDBNull(row["FechaE"]) ? (DateTime?)null : (DateTime?)row["FechaE"];
						retObj._nro					 = Convert.IsDBNull(row["Nro"]) ? (Int64?)null : (Int64?)row["Nro"];
						retObj._estado					 = Convert.IsDBNull(row["Estado"]) ? null : (string)row["Estado"];
						retObj._porcentaje					 = Convert.IsDBNull(row["Porcentaje"]) ? (Int16?)null : (Int16?)row["Porcentaje"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static Int32 SelectAllByIdEvenCount(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectAllByIdEvenCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OrdenTrabajo with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven
		///</parameters>
		public static void DeleteAllByIdEven(DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_DeleteAllByIdEven;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select one row by unique constraint
		///This method returns one row from the table OrdenTrabajo based on a unique constraint
		///</Summary>
		///<returns>
		///DAOOrdenTrabajo
		///</returns>
		///<parameters>
		///Int64? nro
		///</parameters>
		public static DAOOrdenTrabajo SelectOneByNro(Int64? nro)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectOneByNro;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrdenTrabajo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)nro?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOOrdenTrabajo retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOOrdenTrabajo();
					retObj._cie					 = Convert.IsDBNull(dt.Rows[0]["CIE"]) ? null : (string)dt.Rows[0]["CIE"];
					retObj._idEven					 = Convert.IsDBNull(dt.Rows[0]["IdEven"]) ? (Int32?)null : (Int32?)dt.Rows[0]["IdEven"];
					retObj._descripcion					 = Convert.IsDBNull(dt.Rows[0]["Descripcion"]) ? null : (string)dt.Rows[0]["Descripcion"];
					retObj._fechaO					 = Convert.IsDBNull(dt.Rows[0]["FechaO"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["FechaO"];
					retObj._fechaE					 = Convert.IsDBNull(dt.Rows[0]["FechaE"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["FechaE"];
					retObj._nro					 = Convert.IsDBNull(dt.Rows[0]["Nro"]) ? (Int64?)null : (Int64?)dt.Rows[0]["Nro"];
					retObj._estado					 = Convert.IsDBNull(dt.Rows[0]["Estado"]) ? null : (string)dt.Rows[0]["Estado"];
					retObj._porcentaje					 = Convert.IsDBNull(dt.Rows[0]["Porcentaje"]) ? (Int16?)null : (Int16?)dt.Rows[0]["Porcentaje"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by unique constraint
		///This method deletes one row from the table OrdenTrabajo based on a unique constraint
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int64? nro
		///</parameters>
		public virtual void DeleteOneByNro(Int64? nro)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_DeleteOneByNro;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)_nro?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table OrdenTrabajo
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_descripcion?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaO", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fechaO?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaE", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fechaE?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _nro));
				command.Parameters.Add(new SqlParameter("@Estado", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_estado?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Porcentaje", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_porcentaje?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_nro = (Int64?)command.Parameters["@Nro"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table OrdenTrabajo
		///</Summary>
		///<returns>
		///List-DAOOrdenTrabajo.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOOrdenTrabajo> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrdenTrabajo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOOrdenTrabajo> objList = new List<DAOOrdenTrabajo>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrdenTrabajo retObj = new DAOOrdenTrabajo();
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						retObj._fechaO					 = Convert.IsDBNull(row["FechaO"]) ? (DateTime?)null : (DateTime?)row["FechaO"];
						retObj._fechaE					 = Convert.IsDBNull(row["FechaE"]) ? (DateTime?)null : (DateTime?)row["FechaE"];
						retObj._nro					 = Convert.IsDBNull(row["Nro"]) ? (Int64?)null : (Int64?)row["Nro"];
						retObj._estado					 = Convert.IsDBNull(row["Estado"]) ? null : (string)row["Estado"];
						retObj._porcentaje					 = Convert.IsDBNull(row["Porcentaje"]) ? (Int16?)null : (Int16?)row["Porcentaje"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOOrdenTrabajo.
		///</returns>
		///<parameters>
		///DAOOrdenTrabajo daoOrdenTrabajo
		///</parameters>
		public static List<DAOOrdenTrabajo> SelectAllBySearchFields(DAOOrdenTrabajo daoOrdenTrabajo)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrdenTrabajo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.IdEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Descripcion?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaO", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.FechaO?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaE", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.FechaE?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Nro?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Estado", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Estado?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Porcentaje", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Porcentaje?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOOrdenTrabajo> objList = new List<DAOOrdenTrabajo>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrdenTrabajo retObj = new DAOOrdenTrabajo();
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						retObj._fechaO					 = Convert.IsDBNull(row["FechaO"]) ? (DateTime?)null : (DateTime?)row["FechaO"];
						retObj._fechaE					 = Convert.IsDBNull(row["FechaE"]) ? (DateTime?)null : (DateTime?)row["FechaE"];
						retObj._nro					 = Convert.IsDBNull(row["Nro"]) ? (Int64?)null : (Int64?)row["Nro"];
						retObj._estado					 = Convert.IsDBNull(row["Estado"]) ? null : (string)row["Estado"];
						retObj._porcentaje					 = Convert.IsDBNull(row["Porcentaje"]) ? (Int16?)null : (Int16?)row["Porcentaje"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOOrdenTrabajo daoOrdenTrabajo
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOOrdenTrabajo daoOrdenTrabajo)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.IdEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Descripcion?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaO", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.FechaO?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaE", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.FechaE?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Nro?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Estado", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Estado?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Porcentaje", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoOrdenTrabajo.Porcentaje?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table OrdenTrabajo based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrdenTrabajo_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_descripcion?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaO", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fechaO?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaE", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fechaE?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nro", SqlDbType.BigInt, 8, ParameterDirection.InputOutput, false, 19, 0, "", DataRowVersion.Proposed, (object)_nro?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Estado", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_estado?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Porcentaje", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_porcentaje?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_nro = (Int64?)command.Parameters["@Nro"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string Cie
		{
			get
			{
				return _cie;
			}
			set
			{
				_cie = value;
			}
		}

		public Int32? IdEven
		{
			get
			{
				return _idEven;
			}
			set
			{
				_idEven = value;
			}
		}

		public string Descripcion
		{
			get
			{
				return _descripcion;
			}
			set
			{
				_descripcion = value;
			}
		}

		public DateTime? FechaO
		{
			get
			{
				return _fechaO;
			}
			set
			{
				_fechaO = value;
			}
		}

		public DateTime? FechaE
		{
			get
			{
				return _fechaE;
			}
			set
			{
				_fechaE = value;
			}
		}

		public Int64? Nro
		{
			get
			{
				return _nro;
			}
			set
			{
				_nro = value;
			}
		}

		public string Estado
		{
			get
			{
				return _estado;
			}
			set
			{
				_estado = value;
			}
		}

		public Int16? Porcentaje
		{
			get
			{
				return _porcentaje;
			}
			set
			{
				_porcentaje = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprOrdenTrabajo_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[CIE]
			,[IdEven]
			,[Descripcion]
			,[FechaO]
			,[FechaE]
			,[Nro]
			,[Estado]
			,[Porcentaje]
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			[CIE] = @CIE
			AND [IdEven] = @IdEven
			";

		internal static string ctprOrdenTrabajo_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[OrdenTrabajo]
			WHERE 
			[CIE] = @CIE
			AND [IdEven] = @IdEven
			";

		internal static string ctprOrdenTrabajo_SelectAllByCie = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[CIE]
			,[IdEven]
			,[Descripcion]
			,[FechaO]
			,[FechaE]
			,[Nro]
			,[Estado]
			,[Porcentaje]
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			[CIE] = @CIE
			";

		internal static string ctprOrdenTrabajo_SelectAllByCieCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			[CIE] = @CIE
			";

		internal static string ctprOrdenTrabajo_DeleteAllByCie = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OrdenTrabajo]
			WHERE 
			[CIE] = @CIE
			";

		internal static string ctprOrdenTrabajo_SelectAllByIdEven = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[CIE]
			,[IdEven]
			,[Descripcion]
			,[FechaO]
			,[FechaE]
			,[Nro]
			,[Estado]
			,[Porcentaje]
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprOrdenTrabajo_SelectAllByIdEvenCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprOrdenTrabajo_DeleteAllByIdEven = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OrdenTrabajo]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprOrdenTrabajo_SelectOneByNro = @"
			-- Select one row by a unique constraint
			-- selects all rows from the table
			SELECT 
			[CIE]
			,[IdEven]
			,[Descripcion]
			,[FechaO]
			,[FechaE]
			,[Nro]
			,[Estado]
			,[Porcentaje]
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			[Nro] = @Nro
			";

		internal static string ctprOrdenTrabajo_DeleteOneByNro = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OrdenTrabajo]
			WHERE 
			[Nro] = @Nro
			";

		internal static string ctprOrdenTrabajo_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[OrdenTrabajo]
			(
			[CIE]
			,[IdEven]
			,[Descripcion]
			,[FechaO]
			,[FechaE]
			,[Estado]
			,[Porcentaje]
			)
			VALUES
			(
			@CIE
			,@IdEven
			,@Descripcion
			,@FechaO
			,@FechaE
			,@Estado
			,@Porcentaje
			)
			SELECT 
			@CIE = [CIE]
			,@IdEven = [IdEven]
			,@Descripcion = [Descripcion]
			,@FechaO = [FechaO]
			,@FechaE = [FechaE]
			,@Nro = [Nro]
			,@Estado = [Estado]
			,@Porcentaje = [Porcentaje]
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			[CIE] = @CIE
			AND [IdEven] = @IdEven
			";

		internal static string ctprOrdenTrabajo_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[CIE]
			,[IdEven]
			,[Descripcion]
			,[FechaO]
			,[FechaE]
			,[Nro]
			,[Estado]
			,[Porcentaje]
			FROM [dbo].[OrdenTrabajo]
			";

		internal static string ctprOrdenTrabajo_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OrdenTrabajo]
			";

		internal static string ctprOrdenTrabajo_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[CIE],
			[IdEven],
			[Descripcion],
			[FechaO],
			[FechaE],
			[Nro],
			[Estado],
			[Porcentaje]
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			([CIE] LIKE @CIE OR @CIE is null)
			AND ([IdEven] LIKE @IdEven OR @IdEven is null)
			AND ([Descripcion] LIKE @Descripcion OR @Descripcion is null)
			AND ([FechaO] LIKE @FechaO OR @FechaO is null)
			AND ([FechaE] LIKE @FechaE OR @FechaE is null)
			AND ([Nro] LIKE @Nro OR @Nro is null)
			AND ([Estado] LIKE @Estado OR @Estado is null)
			AND ([Porcentaje] LIKE @Porcentaje OR @Porcentaje is null)
			";

		internal static string ctprOrdenTrabajo_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			([CIE] LIKE @CIE OR @CIE is null)
			AND ([IdEven] LIKE @IdEven OR @IdEven is null)
			AND ([Descripcion] LIKE @Descripcion OR @Descripcion is null)
			AND ([FechaO] LIKE @FechaO OR @FechaO is null)
			AND ([FechaE] LIKE @FechaE OR @FechaE is null)
			AND ([Nro] LIKE @Nro OR @Nro is null)
			AND ([Estado] LIKE @Estado OR @Estado is null)
			AND ([Porcentaje] LIKE @Porcentaje OR @Porcentaje is null)
			";

		internal static string ctprOrdenTrabajo_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[OrdenTrabajo]
			SET
			[Descripcion] = @Descripcion
			,[FechaO] = @FechaO
			,[FechaE] = @FechaE
			,[Nro] = @Nro
			,[Estado] = @Estado
			,[Porcentaje] = @Porcentaje
			WHERE 
			[CIE] = @CIE
			AND [IdEven] = @IdEven
			SELECT 
			@CIE = [CIE]
			,@IdEven = [IdEven]
			,@Descripcion = [Descripcion]
			,@FechaO = [FechaO]
			,@FechaE = [FechaE]
			,@Nro = [Nro]
			,@Estado = [Estado]
			,@Porcentaje = [Porcentaje]
			FROM [dbo].[OrdenTrabajo]
			WHERE 
			[CIE] = @CIE
			AND [IdEven] = @IdEven
			";

	}
}
#endregion
