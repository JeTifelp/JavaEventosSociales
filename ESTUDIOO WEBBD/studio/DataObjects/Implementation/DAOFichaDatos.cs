/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOFichaDatos : DATACONN0_BaseData
	{
		#region member variables
		protected Int16? _id;
		protected Int32? _idEven;
		protected string _descripcion;
		#endregion

		#region class methods
		public DAOFichaDatos()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table FichaDatos based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOFichaDatos
		///</returns>
		///<parameters>
		///Int16? id, Int32? idEven
		///</parameters>
		public static DAOFichaDatos SelectOne(Int16? id, Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("FichaDatos");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOFichaDatos retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOFichaDatos();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int16?)null : (Int16?)dt.Rows[0]["Id"];
					retObj._idEven					 = Convert.IsDBNull(dt.Rows[0]["IdEven"]) ? (Int32?)null : (Int32?)dt.Rows[0]["IdEven"];
					retObj._descripcion					 = Convert.IsDBNull(dt.Rows[0]["Descripcion"]) ? null : (string)dt.Rows[0]["Descripcion"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table FichaDatos based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table FichaDatos based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOFichaDatos.
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static List<DAOFichaDatos> SelectAllByIdEven(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_SelectAllByIdEven;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("FichaDatos");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOFichaDatos> objList = new List<DAOFichaDatos>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOFichaDatos retObj = new DAOFichaDatos();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int16?)null : (Int16?)row["Id"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static Int32 SelectAllByIdEvenCount(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_SelectAllByIdEvenCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table FichaDatos with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven
		///</parameters>
		public static void DeleteAllByIdEven(DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_DeleteAllByIdEven;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table FichaDatos
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_descripcion?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table FichaDatos
		///</Summary>
		///<returns>
		///List-DAOFichaDatos.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOFichaDatos> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("FichaDatos");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOFichaDatos> objList = new List<DAOFichaDatos>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOFichaDatos retObj = new DAOFichaDatos();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int16?)null : (Int16?)row["Id"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOFichaDatos.
		///</returns>
		///<parameters>
		///DAOFichaDatos daoFichaDatos
		///</parameters>
		public static List<DAOFichaDatos> SelectAllBySearchFields(DAOFichaDatos daoFichaDatos)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("FichaDatos");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoFichaDatos.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoFichaDatos.IdEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoFichaDatos.Descripcion?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOFichaDatos> objList = new List<DAOFichaDatos>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOFichaDatos retObj = new DAOFichaDatos();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int16?)null : (Int16?)row["Id"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOFichaDatos daoFichaDatos
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOFichaDatos daoFichaDatos)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoFichaDatos.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoFichaDatos.IdEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoFichaDatos.Descripcion?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table FichaDatos based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprFichaDatos_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_descripcion?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int16? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public Int32? IdEven
		{
			get
			{
				return _idEven;
			}
			set
			{
				_idEven = value;
			}
		}

		public string Descripcion
		{
			get
			{
				return _descripcion;
			}
			set
			{
				_descripcion = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprFichaDatos_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Id]
			,[IdEven]
			,[Descripcion]
			FROM [dbo].[FichaDatos]
			WHERE 
			[Id] = @Id
			AND [IdEven] = @IdEven
			";

		internal static string ctprFichaDatos_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[FichaDatos]
			WHERE 
			[Id] = @Id
			AND [IdEven] = @IdEven
			";

		internal static string ctprFichaDatos_SelectAllByIdEven = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[IdEven]
			,[Descripcion]
			FROM [dbo].[FichaDatos]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprFichaDatos_SelectAllByIdEvenCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[FichaDatos]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprFichaDatos_DeleteAllByIdEven = @"
			
			-- delete all matching from the table
			DELETE [dbo].[FichaDatos]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprFichaDatos_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[FichaDatos]
			(
			[Id]
			,[IdEven]
			,[Descripcion]
			)
			VALUES
			(
			@Id
			,@IdEven
			,@Descripcion
			)
			SELECT 
			@Id = [Id]
			,@IdEven = [IdEven]
			,@Descripcion = [Descripcion]
			FROM [dbo].[FichaDatos]
			WHERE 
			[Id] = @Id
			AND [IdEven] = @IdEven
			";

		internal static string ctprFichaDatos_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Id]
			,[IdEven]
			,[Descripcion]
			FROM [dbo].[FichaDatos]
			";

		internal static string ctprFichaDatos_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[FichaDatos]
			";

		internal static string ctprFichaDatos_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Id],
			[IdEven],
			[Descripcion]
			FROM [dbo].[FichaDatos]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([IdEven] LIKE @IdEven OR @IdEven is null)
			AND ([Descripcion] LIKE @Descripcion OR @Descripcion is null)
			";

		internal static string ctprFichaDatos_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[FichaDatos]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([IdEven] LIKE @IdEven OR @IdEven is null)
			AND ([Descripcion] LIKE @Descripcion OR @Descripcion is null)
			";

		internal static string ctprFichaDatos_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[FichaDatos]
			SET
			[Descripcion] = @Descripcion
			WHERE 
			[Id] = @Id
			AND [IdEven] = @IdEven
			SELECT 
			@Id = [Id]
			,@IdEven = [IdEven]
			,@Descripcion = [Descripcion]
			FROM [dbo].[FichaDatos]
			WHERE 
			[Id] = @Id
			AND [IdEven] = @IdEven
			";

	}
}
#endregion
