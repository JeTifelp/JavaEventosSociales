/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOContrato : DATACONN0_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected decimal? _costoTotal;
		protected decimal? _aCuenta;
		protected decimal? _saldo;
		protected DateTime? _fechaCont;
		protected string _obs;
		protected string _cie;
		protected string _cic;
		protected Int32? _idPaq;
		protected Int32? _idEven;
		#endregion

		#region class methods
		public DAOContrato()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Contrato based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOContrato
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAOContrato SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Contrato");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOContrato retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOContrato();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Id"];
					retObj._costoTotal					 = Convert.IsDBNull(dt.Rows[0]["CostoTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["CostoTotal"];
					retObj._aCuenta					 = Convert.IsDBNull(dt.Rows[0]["ACuenta"]) ? (decimal?)null : (decimal?)dt.Rows[0]["ACuenta"];
					retObj._saldo					 = Convert.IsDBNull(dt.Rows[0]["Saldo"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Saldo"];
					retObj._fechaCont					 = Convert.IsDBNull(dt.Rows[0]["FechaCont"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["FechaCont"];
					retObj._obs					 = Convert.IsDBNull(dt.Rows[0]["Obs"]) ? null : (string)dt.Rows[0]["Obs"];
					retObj._cie					 = Convert.IsDBNull(dt.Rows[0]["CIE"]) ? null : (string)dt.Rows[0]["CIE"];
					retObj._cic					 = Convert.IsDBNull(dt.Rows[0]["CIC"]) ? null : (string)dt.Rows[0]["CIC"];
					retObj._idPaq					 = Convert.IsDBNull(dt.Rows[0]["IdPaq"]) ? (Int32?)null : (Int32?)dt.Rows[0]["IdPaq"];
					retObj._idEven					 = Convert.IsDBNull(dt.Rows[0]["IdEven"]) ? (Int32?)null : (Int32?)dt.Rows[0]["IdEven"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Contrato based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Contrato based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOContrato.
		///</returns>
		///<parameters>
		///string cie
		///</parameters>
		public static List<DAOContrato> SelectAllByCie(string cie)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllByCie;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Contrato");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOContrato> objList = new List<DAOContrato>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContrato retObj = new DAOContrato();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._costoTotal					 = Convert.IsDBNull(row["CostoTotal"]) ? (decimal?)null : (decimal?)row["CostoTotal"];
						retObj._aCuenta					 = Convert.IsDBNull(row["ACuenta"]) ? (decimal?)null : (decimal?)row["ACuenta"];
						retObj._saldo					 = Convert.IsDBNull(row["Saldo"]) ? (decimal?)null : (decimal?)row["Saldo"];
						retObj._fechaCont					 = Convert.IsDBNull(row["FechaCont"]) ? (DateTime?)null : (DateTime?)row["FechaCont"];
						retObj._obs					 = Convert.IsDBNull(row["Obs"]) ? null : (string)row["Obs"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._cic					 = Convert.IsDBNull(row["CIC"]) ? null : (string)row["CIC"];
						retObj._idPaq					 = Convert.IsDBNull(row["IdPaq"]) ? (Int32?)null : (Int32?)row["IdPaq"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string cie
		///</parameters>
		public static Int32 SelectAllByCieCount(string cie)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllByCieCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Contrato with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, string cie
		///</parameters>
		public static void DeleteAllByCie(DATACONN0_TxConnectionProvider connectionProvider, string cie)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_DeleteAllByCie;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cie?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Contrato based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOContrato.
		///</returns>
		///<parameters>
		///string cic
		///</parameters>
		public static List<DAOContrato> SelectAllByCic(string cic)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllByCic;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Contrato");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@CIC", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cic?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOContrato> objList = new List<DAOContrato>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContrato retObj = new DAOContrato();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._costoTotal					 = Convert.IsDBNull(row["CostoTotal"]) ? (decimal?)null : (decimal?)row["CostoTotal"];
						retObj._aCuenta					 = Convert.IsDBNull(row["ACuenta"]) ? (decimal?)null : (decimal?)row["ACuenta"];
						retObj._saldo					 = Convert.IsDBNull(row["Saldo"]) ? (decimal?)null : (decimal?)row["Saldo"];
						retObj._fechaCont					 = Convert.IsDBNull(row["FechaCont"]) ? (DateTime?)null : (DateTime?)row["FechaCont"];
						retObj._obs					 = Convert.IsDBNull(row["Obs"]) ? null : (string)row["Obs"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._cic					 = Convert.IsDBNull(row["CIC"]) ? null : (string)row["CIC"];
						retObj._idPaq					 = Convert.IsDBNull(row["IdPaq"]) ? (Int32?)null : (Int32?)row["IdPaq"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}
        public static List<DAOContrato> SelectAllavancecontrato(string cic)
        {
            SqlCommand command = new SqlCommand();
            command.CommandText = InlineProcs.ctprContrato_contratosbyci;
            command.CommandType = CommandType.Text;
            SqlConnection staticConnection = StaticSqlConnection;
            command.Connection = staticConnection;

            DataTable dt = new DataTable("Contrato");
            SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
            try
            {
                command.Parameters.Add(new SqlParameter("@CIC", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cic ?? (object)DBNull.Value));

                staticConnection.Open();
                sqlAdapter.Fill(dt);


                List<DAOContrato> objList = new List<DAOContrato>();
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        DAOContrato retObj = new DAOContrato();
                        //retObj._id = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
                        retObj._costoTotal = Convert.IsDBNull(row["CostoTotal"]) ? (decimal?)null : (decimal?)row["CostoTotal"];
                        retObj._aCuenta = Convert.IsDBNull(row["ACuenta"]) ? (decimal?)null : (decimal?)row["ACuenta"];
                        retObj._saldo = Convert.IsDBNull(row["Saldo"]) ? (decimal?)null : (decimal?)row["Saldo"];
                        retObj._fechaCont = Convert.IsDBNull(row["FechaCont"]) ? (DateTime?)null : (DateTime?)row["FechaCont"];
                        retObj._obs = Convert.IsDBNull(row["Obs"]) ? null : (string)row["Obs"];
                        //retObj._cie = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
                        //retObj._cic = Convert.IsDBNull(row["CIC"]) ? null : (string)row["CIC"];
                        //retObj._idPaq = Convert.IsDBNull(row["IdPaq"]) ? (Int32?)null : (Int32?)row["IdPaq"];
                        //retObj._idEven = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
                        objList.Add(retObj);
                    }
                }
                return objList;
            }
            catch
            {
                throw;
            }
            finally
            {
                staticConnection.Close();
                command.Dispose();
            }
        }

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string cic
		///</parameters>
		public static Int32 SelectAllByCicCount(string cic)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllByCicCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIC", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cic?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Contrato with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, string cic
		///</parameters>
		public static void DeleteAllByCic(DATACONN0_TxConnectionProvider connectionProvider, string cic)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_DeleteAllByCic;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CIC", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)cic?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Contrato based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOContrato.
		///</returns>
		///<parameters>
		///Int32? idPaq
		///</parameters>
		public static List<DAOContrato> SelectAllByIdPaq(Int32? idPaq)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllByIdPaq;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Contrato");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdPaq", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idPaq?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOContrato> objList = new List<DAOContrato>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContrato retObj = new DAOContrato();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._costoTotal					 = Convert.IsDBNull(row["CostoTotal"]) ? (decimal?)null : (decimal?)row["CostoTotal"];
						retObj._aCuenta					 = Convert.IsDBNull(row["ACuenta"]) ? (decimal?)null : (decimal?)row["ACuenta"];
						retObj._saldo					 = Convert.IsDBNull(row["Saldo"]) ? (decimal?)null : (decimal?)row["Saldo"];
						retObj._fechaCont					 = Convert.IsDBNull(row["FechaCont"]) ? (DateTime?)null : (DateTime?)row["FechaCont"];
						retObj._obs					 = Convert.IsDBNull(row["Obs"]) ? null : (string)row["Obs"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._cic					 = Convert.IsDBNull(row["CIC"]) ? null : (string)row["CIC"];
						retObj._idPaq					 = Convert.IsDBNull(row["IdPaq"]) ? (Int32?)null : (Int32?)row["IdPaq"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? idPaq
		///</parameters>
		public static Int32 SelectAllByIdPaqCount(Int32? idPaq)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllByIdPaqCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdPaq", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idPaq?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Contrato with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? idPaq
		///</parameters>
		public static void DeleteAllByIdPaq(DATACONN0_TxConnectionProvider connectionProvider, Int32? idPaq)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_DeleteAllByIdPaq;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdPaq", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idPaq?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Contrato based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOContrato.
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static List<DAOContrato> SelectAllByIdEven(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllByIdEven;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Contrato");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOContrato> objList = new List<DAOContrato>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContrato retObj = new DAOContrato();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._costoTotal					 = Convert.IsDBNull(row["CostoTotal"]) ? (decimal?)null : (decimal?)row["CostoTotal"];
						retObj._aCuenta					 = Convert.IsDBNull(row["ACuenta"]) ? (decimal?)null : (decimal?)row["ACuenta"];
						retObj._saldo					 = Convert.IsDBNull(row["Saldo"]) ? (decimal?)null : (decimal?)row["Saldo"];
						retObj._fechaCont					 = Convert.IsDBNull(row["FechaCont"]) ? (DateTime?)null : (DateTime?)row["FechaCont"];
						retObj._obs					 = Convert.IsDBNull(row["Obs"]) ? null : (string)row["Obs"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._cic					 = Convert.IsDBNull(row["CIC"]) ? null : (string)row["CIC"];
						retObj._idPaq					 = Convert.IsDBNull(row["IdPaq"]) ? (Int32?)null : (Int32?)row["IdPaq"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static Int32 SelectAllByIdEvenCount(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllByIdEvenCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Contrato with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven
		///</parameters>
		public static void DeleteAllByIdEven(DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_DeleteAllByIdEven;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Contrato
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CostoTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_costoTotal?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ACuenta", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_aCuenta?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Saldo", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_saldo?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaCont", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fechaCont?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Obs", SqlDbType.VarChar, 100, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_obs?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIC", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_cic?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdPaq", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idPaq?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Contrato
		///</Summary>
		///<returns>
		///List-DAOContrato.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOContrato> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Contrato");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOContrato> objList = new List<DAOContrato>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContrato retObj = new DAOContrato();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._costoTotal					 = Convert.IsDBNull(row["CostoTotal"]) ? (decimal?)null : (decimal?)row["CostoTotal"];
						retObj._aCuenta					 = Convert.IsDBNull(row["ACuenta"]) ? (decimal?)null : (decimal?)row["ACuenta"];
						retObj._saldo					 = Convert.IsDBNull(row["Saldo"]) ? (decimal?)null : (decimal?)row["Saldo"];
						retObj._fechaCont					 = Convert.IsDBNull(row["FechaCont"]) ? (DateTime?)null : (DateTime?)row["FechaCont"];
						retObj._obs					 = Convert.IsDBNull(row["Obs"]) ? null : (string)row["Obs"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._cic					 = Convert.IsDBNull(row["CIC"]) ? null : (string)row["CIC"];
						retObj._idPaq					 = Convert.IsDBNull(row["IdPaq"]) ? (Int32?)null : (Int32?)row["IdPaq"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOContrato.
		///</returns>
		///<parameters>
		///DAOContrato daoContrato
		///</parameters>
		public static List<DAOContrato> SelectAllBySearchFields(DAOContrato daoContrato)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Contrato");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoContrato.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CostoTotal", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoContrato.CostoTotal?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ACuenta", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoContrato.ACuenta?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Saldo", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoContrato.Saldo?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaCont", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoContrato.FechaCont?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Obs", SqlDbType.VarChar, 100, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContrato.Obs?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoContrato.Cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIC", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoContrato.Cic?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdPaq", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoContrato.IdPaq?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoContrato.IdEven?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOContrato> objList = new List<DAOContrato>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOContrato retObj = new DAOContrato();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._costoTotal					 = Convert.IsDBNull(row["CostoTotal"]) ? (decimal?)null : (decimal?)row["CostoTotal"];
						retObj._aCuenta					 = Convert.IsDBNull(row["ACuenta"]) ? (decimal?)null : (decimal?)row["ACuenta"];
						retObj._saldo					 = Convert.IsDBNull(row["Saldo"]) ? (decimal?)null : (decimal?)row["Saldo"];
						retObj._fechaCont					 = Convert.IsDBNull(row["FechaCont"]) ? (DateTime?)null : (DateTime?)row["FechaCont"];
						retObj._obs					 = Convert.IsDBNull(row["Obs"]) ? null : (string)row["Obs"];
						retObj._cie					 = Convert.IsDBNull(row["CIE"]) ? null : (string)row["CIE"];
						retObj._cic					 = Convert.IsDBNull(row["CIC"]) ? null : (string)row["CIC"];
						retObj._idPaq					 = Convert.IsDBNull(row["IdPaq"]) ? (Int32?)null : (Int32?)row["IdPaq"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOContrato daoContrato
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOContrato daoContrato)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoContrato.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CostoTotal", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoContrato.CostoTotal?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ACuenta", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoContrato.ACuenta?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Saldo", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoContrato.Saldo?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaCont", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoContrato.FechaCont?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Obs", SqlDbType.VarChar, 100, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoContrato.Obs?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoContrato.Cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIC", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoContrato.Cic?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdPaq", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoContrato.IdPaq?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoContrato.IdEven?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Contrato based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprContrato_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CostoTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_costoTotal?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@ACuenta", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_aCuenta?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Saldo", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_saldo?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaCont", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fechaCont?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Obs", SqlDbType.VarChar, 100, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_obs?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIE", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_cie?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@CIC", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_cic?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdPaq", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idPaq?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public decimal? CostoTotal
		{
			get
			{
				return _costoTotal;
			}
			set
			{
				_costoTotal = value;
			}
		}

		public decimal? ACuenta
		{
			get
			{
				return _aCuenta;
			}
			set
			{
				_aCuenta = value;
			}
		}

		public decimal? Saldo
		{
			get
			{
				return _saldo;
			}
			set
			{
				_saldo = value;
			}
		}

		public DateTime? FechaCont
		{
			get
			{
				return _fechaCont;
			}
			set
			{
				_fechaCont = value;
			}
		}

		public string Obs
		{
			get
			{
				return _obs;
			}
			set
			{
				_obs = value;
			}
		}

		public string Cie
		{
			get
			{
				return _cie;
			}
			set
			{
				_cie = value;
			}
		}

		public string Cic
		{
			get
			{
				return _cic;
			}
			set
			{
				_cic = value;
			}
		}

		public Int32? IdPaq
		{
			get
			{
				return _idPaq;
			}
			set
			{
				_idPaq = value;
			}
		}

		public Int32? IdEven
		{
			get
			{
				return _idEven;
			}
			set
			{
				_idEven = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprContrato_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Id]
			,[CostoTotal]
			,[ACuenta]
			,[Saldo]
			,[FechaCont]
			,[Obs]
			,[CIE]
			,[CIC]
			,[IdPaq]
			,[IdEven]
			FROM [dbo].[Contrato]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprContrato_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Contrato]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprContrato_SelectAllByCie = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[CostoTotal]
			,[ACuenta]
			,[Saldo]
			,[FechaCont]
			,[Obs]
			,[CIE]
			,[CIC]
			,[IdPaq]
			,[IdEven]
			FROM [dbo].[Contrato]
			WHERE 
			[CIE] = @CIE
			";

		internal static string ctprContrato_SelectAllByCieCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Contrato]
			WHERE 
			[CIE] = @CIE
			";

		internal static string ctprContrato_DeleteAllByCie = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Contrato]
			WHERE 
			[CIE] = @CIE
			";

		internal static string ctprContrato_SelectAllByCic = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[CostoTotal]
			,[ACuenta]
			,[Saldo]
			,[FechaCont]
			,[Obs]
			,[CIE]
			,[CIC]
			,[IdPaq]
			,[IdEven]
			FROM [dbo].[Contrato]
			WHERE 
			[CIC] = @CIC
			";

		internal static string ctprContrato_SelectAllByCicCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Contrato]
			WHERE 
			[CIC] = @CIC
			";

		internal static string ctprContrato_DeleteAllByCic = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Contrato]
			WHERE 
			[CIC] = @CIC
			";

		internal static string ctprContrato_SelectAllByIdPaq = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[CostoTotal]
			,[ACuenta]
			,[Saldo]
			,[FechaCont]
			,[Obs]
			,[CIE]
			,[CIC]
			,[IdPaq]
			,[IdEven]
			FROM [dbo].[Contrato]
			WHERE 
			[IdPaq] = @IdPaq
			";

		internal static string ctprContrato_SelectAllByIdPaqCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Contrato]
			WHERE 
			[IdPaq] = @IdPaq
			";

		internal static string ctprContrato_DeleteAllByIdPaq = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Contrato]
			WHERE 
			[IdPaq] = @IdPaq
			";

		internal static string ctprContrato_SelectAllByIdEven = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[CostoTotal]
			,[ACuenta]
			,[Saldo]
			,[FechaCont]
			,[Obs]
			,[CIE]
			,[CIC]
			,[IdPaq]
			,[IdEven]
			FROM [dbo].[Contrato]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprContrato_SelectAllByIdEvenCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Contrato]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprContrato_DeleteAllByIdEven = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Contrato]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprContrato_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Contrato]
			(
			[Id]
			,[CostoTotal]
			,[ACuenta]
			,[Saldo]
			,[FechaCont]
			,[Obs]
			,[CIE]
			,[CIC]
			,[IdPaq]
			,[IdEven]
			)
			VALUES
			(
			@Id
			,@CostoTotal
			,@ACuenta
			,@Saldo
			,@FechaCont
			,@Obs
			,@CIE
			,@CIC
			,@IdPaq
			,@IdEven
			)
			SELECT 
			@Id = [Id]
			,@CostoTotal = [CostoTotal]
			,@ACuenta = [ACuenta]
			,@Saldo = [Saldo]
			,@FechaCont = [FechaCont]
			,@Obs = [Obs]
			,@CIE = [CIE]
			,@CIC = [CIC]
			,@IdPaq = [IdPaq]
			,@IdEven = [IdEven]
			FROM [dbo].[Contrato]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprContrato_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Id]
			,[CostoTotal]
			,[ACuenta]
			,[Saldo]
			,[FechaCont]
			,[Obs]
			,[CIE]
			,[CIC]
			,[IdPaq]
			,[IdEven]
			FROM [dbo].[Contrato]
			";

		internal static string ctprContrato_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Contrato]
			";

		internal static string ctprContrato_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Id],
			[CostoTotal],
			[ACuenta],
			[Saldo],
			[FechaCont],
			[Obs],
			[CIE],
			[CIC],
			[IdPaq],
			[IdEven]
			FROM [dbo].[Contrato]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([CostoTotal] LIKE @CostoTotal OR @CostoTotal is null)
			AND ([ACuenta] LIKE @ACuenta OR @ACuenta is null)
			AND ([Saldo] LIKE @Saldo OR @Saldo is null)
			AND ([FechaCont] LIKE @FechaCont OR @FechaCont is null)
			AND ([Obs] LIKE @Obs OR @Obs is null)
			AND ([CIE] LIKE @CIE OR @CIE is null)
			AND ([CIC] LIKE @CIC OR @CIC is null)
			AND ([IdPaq] LIKE @IdPaq OR @IdPaq is null)
			AND ([IdEven] LIKE @IdEven OR @IdEven is null)
			";

		internal static string ctprContrato_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[Contrato]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([CostoTotal] LIKE @CostoTotal OR @CostoTotal is null)
			AND ([ACuenta] LIKE @ACuenta OR @ACuenta is null)
			AND ([Saldo] LIKE @Saldo OR @Saldo is null)
			AND ([FechaCont] LIKE @FechaCont OR @FechaCont is null)
			AND ([Obs] LIKE @Obs OR @Obs is null)
			AND ([CIE] LIKE @CIE OR @CIE is null)
			AND ([CIC] LIKE @CIC OR @CIC is null)
			AND ([IdPaq] LIKE @IdPaq OR @IdPaq is null)
			AND ([IdEven] LIKE @IdEven OR @IdEven is null)
			";

		internal static string ctprContrato_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Contrato]
			SET
			[CostoTotal] = @CostoTotal
			,[ACuenta] = @ACuenta
			,[Saldo] = @Saldo
			,[FechaCont] = @FechaCont
			,[Obs] = @Obs
			,[CIE] = @CIE
			,[CIC] = @CIC
			,[IdPaq] = @IdPaq
			,[IdEven] = @IdEven
			WHERE 
			[Id] = @Id
			SELECT 
			@Id = [Id]
			,@CostoTotal = [CostoTotal]
			,@ACuenta = [ACuenta]
			,@Saldo = [Saldo]
			,@FechaCont = [FechaCont]
			,@Obs = [Obs]
			,@CIE = [CIE]
			,@CIC = [CIC]
			,@IdPaq = [IdPaq]
			,@IdEven = [IdEven]
			FROM [dbo].[Contrato]
			WHERE 
			[Id] = @Id
			";
        internal static string ctprContrato_contratosbyci = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
            SELECT 
			
			[CostoTotal]
			,[ACuenta]
			,[Saldo]
			,[FechaCont]
			,[Obs]
			,[Nombre]
			,[APellidoP]
			,[APellidoM]
						
			
            FROM      dbo.Contrato INNER JOIN
                      dbo.Persona ON dbo.Contrato.CIC = dbo.Persona.CI 
                      
			WHERE 
			[CIC] = @CIC
			";

	}
}
#endregion
