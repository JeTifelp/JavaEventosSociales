/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOCliente : DATACONN0_BaseData
	{
		#region member variables
		protected string _ci;
		protected DateTime? _fechaReg;
		#endregion

		#region class methods
		public DAOCliente()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Cliente based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOCliente
		///</returns>
		///<parameters>
		///string ci
		///</parameters>
		public static DAOCliente SelectOne(string ci)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Cliente");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@CI", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)ci?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOCliente retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOCliente();
					retObj._ci					 = Convert.IsDBNull(dt.Rows[0]["CI"]) ? null : (string)dt.Rows[0]["CI"];
					retObj._fechaReg					 = Convert.IsDBNull(dt.Rows[0]["FechaReg"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["FechaReg"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Cliente based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CI", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_ci?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Cliente based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOCliente.
		///</returns>
		///<parameters>
		///string ci
		///</parameters>
		public static List<DAOCliente> SelectAllByCi(string ci)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_SelectAllByCi;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Cliente");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@CI", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)ci?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOCliente> objList = new List<DAOCliente>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCliente retObj = new DAOCliente();
						retObj._ci					 = Convert.IsDBNull(row["CI"]) ? null : (string)row["CI"];
						retObj._fechaReg					 = Convert.IsDBNull(row["FechaReg"]) ? (DateTime?)null : (DateTime?)row["FechaReg"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string ci
		///</parameters>
		public static Int32 SelectAllByCiCount(string ci)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_SelectAllByCiCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@CI", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)ci?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Cliente with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, string ci
		///</parameters>
		public static void DeleteAllByCi(DATACONN0_TxConnectionProvider connectionProvider, string ci)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_DeleteAllByCi;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CI", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)ci?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Cliente
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CI", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_ci?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaReg", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fechaReg?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Cliente
		///</Summary>
		///<returns>
		///List-DAOCliente.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOCliente> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Cliente");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOCliente> objList = new List<DAOCliente>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCliente retObj = new DAOCliente();
						retObj._ci					 = Convert.IsDBNull(row["CI"]) ? null : (string)row["CI"];
						retObj._fechaReg					 = Convert.IsDBNull(row["FechaReg"]) ? (DateTime?)null : (DateTime?)row["FechaReg"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOCliente.
		///</returns>
		///<parameters>
		///DAOCliente daoCliente
		///</parameters>
		public static List<DAOCliente> SelectAllBySearchFields(DAOCliente daoCliente)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Cliente");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@CI", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCliente.Ci?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaReg", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCliente.FechaReg?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOCliente> objList = new List<DAOCliente>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCliente retObj = new DAOCliente();
						retObj._ci					 = Convert.IsDBNull(row["CI"]) ? null : (string)row["CI"];
						retObj._fechaReg					 = Convert.IsDBNull(row["FechaReg"]) ? (DateTime?)null : (DateTime?)row["FechaReg"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOCliente daoCliente
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOCliente daoCliente)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@CI", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCliente.Ci?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaReg", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoCliente.FechaReg?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Cliente based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCliente_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@CI", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_ci?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FechaReg", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fechaReg?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string Ci
		{
			get
			{
				return _ci;
			}
			set
			{
				_ci = value;
			}
		}

		public DateTime? FechaReg
		{
			get
			{
				return _fechaReg;
			}
			set
			{
				_fechaReg = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprCliente_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[CI]
			,[FechaReg]
			FROM [dbo].[Cliente]
			WHERE 
			[CI] = @CI
			";

		internal static string ctprCliente_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Cliente]
			WHERE 
			[CI] = @CI
			";

		internal static string ctprCliente_SelectAllByCi = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[CI]
			,[FechaReg]
			FROM [dbo].[Cliente]
			WHERE 
			[CI] = @CI
			";

		internal static string ctprCliente_SelectAllByCiCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Cliente]
			WHERE 
			[CI] = @CI
			";

		internal static string ctprCliente_DeleteAllByCi = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Cliente]
			WHERE 
			[CI] = @CI
			";

		internal static string ctprCliente_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Cliente]
			(
			[CI]
			,[FechaReg]
			)
			VALUES
			(
			@CI
			,@FechaReg
			)
			SELECT 
			@CI = [CI]
			,@FechaReg = [FechaReg]
			FROM [dbo].[Cliente]
			WHERE 
			[CI] = @CI
			";

		internal static string ctprCliente_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[CI]
			,[FechaReg]
			FROM [dbo].[Cliente]
			";

		internal static string ctprCliente_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Cliente]
			";

		internal static string ctprCliente_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[CI],
			[FechaReg]
			FROM [dbo].[Cliente]
			WHERE 
			([CI] LIKE @CI OR @CI is null)
			AND ([FechaReg] LIKE @FechaReg OR @FechaReg is null)
			";

		internal static string ctprCliente_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[Cliente]
			WHERE 
			([CI] LIKE @CI OR @CI is null)
			AND ([FechaReg] LIKE @FechaReg OR @FechaReg is null)
			";

		internal static string ctprCliente_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Cliente]
			SET
			[FechaReg] = @FechaReg
			WHERE 
			[CI] = @CI
			SELECT 
			@CI = [CI]
			,@FechaReg = [FechaReg]
			FROM [dbo].[Cliente]
			WHERE 
			[CI] = @CI
			";

	}
}
#endregion
