/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOComponentePaquete : DATACONN0_BaseData
	{
		#region member variables
		protected Int16? _id;
		protected string _nombre;
		protected decimal? _precio;
		protected bool? _icono;
		protected Int16? _idCC;
		#endregion

		#region class methods
		public DAOComponentePaquete()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table ComponentePaquete based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOComponentePaquete
		///</returns>
		///<parameters>
		///Int16? id
		///</parameters>
		public static DAOComponentePaquete SelectOne(Int16? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComponentePaquete");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOComponentePaquete retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOComponentePaquete();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int16?)null : (Int16?)dt.Rows[0]["Id"];
					retObj._nombre					 = Convert.IsDBNull(dt.Rows[0]["Nombre"]) ? null : (string)dt.Rows[0]["Nombre"];
					retObj._precio					 = Convert.IsDBNull(dt.Rows[0]["Precio"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Precio"];
					retObj._icono					 = Convert.IsDBNull(dt.Rows[0]["Icono"]) ? (bool?)null : (bool?)dt.Rows[0]["Icono"];
					retObj._idCC					 = Convert.IsDBNull(dt.Rows[0]["IdCC"]) ? (Int16?)null : (Int16?)dt.Rows[0]["IdCC"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table ComponentePaquete based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select one row by unique constraint
		///This method returns one row from the table ComponentePaquete based on a unique constraint
		///</Summary>
		///<returns>
		///DAOComponentePaquete
		///</returns>
		///<parameters>
		///string nombre
		///</parameters>
		public static DAOComponentePaquete SelectOneByNombre(string nombre)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_SelectOneByNombre;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComponentePaquete");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)nombre?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOComponentePaquete retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOComponentePaquete();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int16?)null : (Int16?)dt.Rows[0]["Id"];
					retObj._nombre					 = Convert.IsDBNull(dt.Rows[0]["Nombre"]) ? null : (string)dt.Rows[0]["Nombre"];
					retObj._precio					 = Convert.IsDBNull(dt.Rows[0]["Precio"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Precio"];
					retObj._icono					 = Convert.IsDBNull(dt.Rows[0]["Icono"]) ? (bool?)null : (bool?)dt.Rows[0]["Icono"];
					retObj._idCC					 = Convert.IsDBNull(dt.Rows[0]["IdCC"]) ? (Int16?)null : (Int16?)dt.Rows[0]["IdCC"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by unique constraint
		///This method deletes one row from the table ComponentePaquete based on a unique constraint
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string nombre
		///</parameters>
		public virtual void DeleteOneByNombre(string nombre)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_DeleteOneByNombre;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_nombre?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table ComponentePaquete based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOComponentePaquete.
		///</returns>
		///<parameters>
		///Int16? idCC
		///</parameters>
		public static List<DAOComponentePaquete> SelectAllByIdCC(Int16? idCC)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_SelectAllByIdCC;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComponentePaquete");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdCC", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idCC?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOComponentePaquete> objList = new List<DAOComponentePaquete>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOComponentePaquete retObj = new DAOComponentePaquete();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int16?)null : (Int16?)row["Id"];
						retObj._nombre					 = Convert.IsDBNull(row["Nombre"]) ? null : (string)row["Nombre"];
						retObj._precio					 = Convert.IsDBNull(row["Precio"]) ? (decimal?)null : (decimal?)row["Precio"];
						retObj._icono					 = Convert.IsDBNull(row["Icono"]) ? (bool?)null : (bool?)row["Icono"];
						retObj._idCC					 = Convert.IsDBNull(row["IdCC"]) ? (Int16?)null : (Int16?)row["IdCC"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int16? idCC
		///</parameters>
		public static Int32 SelectAllByIdCCCount(Int16? idCC)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_SelectAllByIdCCCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdCC", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idCC?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table ComponentePaquete with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int16? idCC
		///</parameters>
		public static void DeleteAllByIdCC(DATACONN0_TxConnectionProvider connectionProvider, Int16? idCC)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_DeleteAllByIdCC;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdCC", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idCC?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table ComponentePaquete
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.Output, false, 5, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_nombre?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Precio", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_precio?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Icono", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_icono?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdCC", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_idCC?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id = (Int16?)command.Parameters["@Id"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table ComponentePaquete
		///</Summary>
		///<returns>
		///List-DAOComponentePaquete.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOComponentePaquete> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComponentePaquete");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOComponentePaquete> objList = new List<DAOComponentePaquete>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOComponentePaquete retObj = new DAOComponentePaquete();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int16?)null : (Int16?)row["Id"];
						retObj._nombre					 = Convert.IsDBNull(row["Nombre"]) ? null : (string)row["Nombre"];
						retObj._precio					 = Convert.IsDBNull(row["Precio"]) ? (decimal?)null : (decimal?)row["Precio"];
						retObj._icono					 = Convert.IsDBNull(row["Icono"]) ? (bool?)null : (bool?)row["Icono"];
						retObj._idCC					 = Convert.IsDBNull(row["IdCC"]) ? (Int16?)null : (Int16?)row["IdCC"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOComponentePaquete.
		///</returns>
		///<parameters>
		///DAOComponentePaquete daoComponentePaquete
		///</parameters>
		public static List<DAOComponentePaquete> SelectAllBySearchFields(DAOComponentePaquete daoComponentePaquete)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("ComponentePaquete");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoComponentePaquete.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoComponentePaquete.Nombre?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Precio", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoComponentePaquete.Precio?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Icono", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoComponentePaquete.Icono?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdCC", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoComponentePaquete.IdCC?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOComponentePaquete> objList = new List<DAOComponentePaquete>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOComponentePaquete retObj = new DAOComponentePaquete();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int16?)null : (Int16?)row["Id"];
						retObj._nombre					 = Convert.IsDBNull(row["Nombre"]) ? null : (string)row["Nombre"];
						retObj._precio					 = Convert.IsDBNull(row["Precio"]) ? (decimal?)null : (decimal?)row["Precio"];
						retObj._icono					 = Convert.IsDBNull(row["Icono"]) ? (bool?)null : (bool?)row["Icono"];
						retObj._idCC					 = Convert.IsDBNull(row["IdCC"]) ? (Int16?)null : (Int16?)row["IdCC"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOComponentePaquete daoComponentePaquete
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOComponentePaquete daoComponentePaquete)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoComponentePaquete.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoComponentePaquete.Nombre?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Precio", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoComponentePaquete.Precio?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Icono", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoComponentePaquete.Icono?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdCC", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoComponentePaquete.IdCC?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table ComponentePaquete based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprComponentePaquete_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_nombre?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Precio", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_precio?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Icono", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_icono?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdCC", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_idCC?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id = (Int16?)command.Parameters["@Id"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int16? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public string Nombre
		{
			get
			{
				return _nombre;
			}
			set
			{
				_nombre = value;
			}
		}

		public decimal? Precio
		{
			get
			{
				return _precio;
			}
			set
			{
				_precio = value;
			}
		}

		public bool? Icono
		{
			get
			{
				return _icono;
			}
			set
			{
				_icono = value;
			}
		}

		public Int16? IdCC
		{
			get
			{
				return _idCC;
			}
			set
			{
				_idCC = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprComponentePaquete_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Nombre]
			,[Precio]
			,[Icono]
			,[IdCC]
			FROM [dbo].[ComponentePaquete]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprComponentePaquete_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[ComponentePaquete]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprComponentePaquete_SelectOneByNombre = @"
			-- Select one row by a unique constraint
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Nombre]
			,[Precio]
			,[Icono]
			,[IdCC]
			FROM [dbo].[ComponentePaquete]
			WHERE 
			[Nombre] = @Nombre
			";

		internal static string ctprComponentePaquete_DeleteOneByNombre = @"
			
			-- delete all matching from the table
			DELETE [dbo].[ComponentePaquete]
			WHERE 
			[Nombre] = @Nombre
			";

		internal static string ctprComponentePaquete_SelectAllByIdCC = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Nombre]
			,[Precio]
			,[Icono]
			,[IdCC]
			FROM [dbo].[ComponentePaquete]
			WHERE 
			[IdCC] = @IdCC
			";

		internal static string ctprComponentePaquete_SelectAllByIdCCCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[ComponentePaquete]
			WHERE 
			[IdCC] = @IdCC
			";

		internal static string ctprComponentePaquete_DeleteAllByIdCC = @"
			
			-- delete all matching from the table
			DELETE [dbo].[ComponentePaquete]
			WHERE 
			[IdCC] = @IdCC
			";

		internal static string ctprComponentePaquete_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[ComponentePaquete]
			(
			[Nombre]
			,[Precio]
			,[Icono]
			,[IdCC]
			)
			VALUES
			(
			@Nombre
			,@Precio
			,@Icono
			,@IdCC
			)
			SELECT 
			@Id = [Id]
			,@Nombre = [Nombre]
			,@Precio = [Precio]
			,@Icono = [Icono]
			,@IdCC = [IdCC]
			FROM [dbo].[ComponentePaquete]
			WHERE 
			Id = SCOPE_IDENTITY()
			";

		internal static string ctprComponentePaquete_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Nombre]
			,[Precio]
			,[Icono]
			,[IdCC]
			FROM [dbo].[ComponentePaquete]
			";

		internal static string ctprComponentePaquete_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[ComponentePaquete]
			";

		internal static string ctprComponentePaquete_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Id],
			[Nombre],
			[Precio],
			[Icono],
			[IdCC]
			FROM [dbo].[ComponentePaquete]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([Nombre] LIKE @Nombre OR @Nombre is null)
			AND ([Precio] LIKE @Precio OR @Precio is null)
			AND ([Icono] LIKE @Icono OR @Icono is null)
			AND ([IdCC] LIKE @IdCC OR @IdCC is null)
			";

		internal static string ctprComponentePaquete_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[ComponentePaquete]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([Nombre] LIKE @Nombre OR @Nombre is null)
			AND ([Precio] LIKE @Precio OR @Precio is null)
			AND ([Icono] LIKE @Icono OR @Icono is null)
			AND ([IdCC] LIKE @IdCC OR @IdCC is null)
			";

		internal static string ctprComponentePaquete_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[ComponentePaquete]
			SET
			[Nombre] = @Nombre
			,[Precio] = @Precio
			,[Icono] = @Icono
			,[IdCC] = @IdCC
			WHERE 
			[Id] = @Id
			SELECT 
			@Id = [Id]
			,@Nombre = [Nombre]
			,@Precio = [Precio]
			,@Icono = [Icono]
			,@IdCC = [IdCC]
			FROM [dbo].[ComponentePaquete]
			WHERE 
			[Id] = @Id
			";

	}
}
#endregion
