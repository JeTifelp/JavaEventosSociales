/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOAgenda : DATACONN0_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _idRes;
		protected Int32? _idEven;
		protected DateTime? _fecha;
		#endregion

		#region class methods
		public DAOAgenda()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Agenda based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOAgenda
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAOAgenda SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Agenda");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOAgenda retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOAgenda();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Id"];
					retObj._idRes					 = Convert.IsDBNull(dt.Rows[0]["IdRes"]) ? (Int32?)null : (Int32?)dt.Rows[0]["IdRes"];
					retObj._idEven					 = Convert.IsDBNull(dt.Rows[0]["IdEven"]) ? (Int32?)null : (Int32?)dt.Rows[0]["IdEven"];
					retObj._fecha					 = Convert.IsDBNull(dt.Rows[0]["Fecha"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["Fecha"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Agenda based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Agenda based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOAgenda.
		///</returns>
		///<parameters>
		///Int32? idRes
		///</parameters>
		public static List<DAOAgenda> SelectAllByIdRes(Int32? idRes)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_SelectAllByIdRes;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Agenda");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdRes", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)idRes?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOAgenda> objList = new List<DAOAgenda>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAgenda retObj = new DAOAgenda();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._idRes					 = Convert.IsDBNull(row["IdRes"]) ? (Int32?)null : (Int32?)row["IdRes"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? idRes
		///</parameters>
		public static Int32 SelectAllByIdResCount(Int32? idRes)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_SelectAllByIdResCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdRes", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)idRes?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Agenda with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? idRes
		///</parameters>
		public static void DeleteAllByIdRes(DATACONN0_TxConnectionProvider connectionProvider, Int32? idRes)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_DeleteAllByIdRes;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdRes", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)idRes?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Agenda based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOAgenda.
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static List<DAOAgenda> SelectAllByIdEven(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_SelectAllByIdEven;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Agenda");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOAgenda> objList = new List<DAOAgenda>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAgenda retObj = new DAOAgenda();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._idRes					 = Convert.IsDBNull(row["IdRes"]) ? (Int32?)null : (Int32?)row["IdRes"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static Int32 SelectAllByIdEvenCount(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_SelectAllByIdEvenCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Agenda with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven
		///</parameters>
		public static void DeleteAllByIdEven(DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_DeleteAllByIdEven;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Agenda
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new SqlParameter("@IdRes", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_idRes?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fecha?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id = (Int32?)command.Parameters["@Id"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Agenda
		///</Summary>
		///<returns>
		///List-DAOAgenda.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOAgenda> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Agenda");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOAgenda> objList = new List<DAOAgenda>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAgenda retObj = new DAOAgenda();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._idRes					 = Convert.IsDBNull(row["IdRes"]) ? (Int32?)null : (Int32?)row["IdRes"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOAgenda.
		///</returns>
		///<parameters>
		///DAOAgenda daoAgenda
		///</parameters>
		public static List<DAOAgenda> SelectAllBySearchFields(DAOAgenda daoAgenda)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Agenda");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoAgenda.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdRes", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoAgenda.IdRes?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoAgenda.IdEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoAgenda.Fecha?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOAgenda> objList = new List<DAOAgenda>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOAgenda retObj = new DAOAgenda();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._idRes					 = Convert.IsDBNull(row["IdRes"]) ? (Int32?)null : (Int32?)row["IdRes"];
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOAgenda daoAgenda
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOAgenda daoAgenda)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoAgenda.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdRes", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoAgenda.IdRes?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoAgenda.IdEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoAgenda.Fecha?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Agenda based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprAgenda_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdRes", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_idRes?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_fecha?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id = (Int32?)command.Parameters["@Id"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public Int32? IdRes
		{
			get
			{
				return _idRes;
			}
			set
			{
				_idRes = value;
			}
		}

		public Int32? IdEven
		{
			get
			{
				return _idEven;
			}
			set
			{
				_idEven = value;
			}
		}

		public DateTime? Fecha
		{
			get
			{
				return _fecha;
			}
			set
			{
				_fecha = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprAgenda_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Id]
			,[IdRes]
			,[IdEven]
			,[Fecha]
			FROM [dbo].[Agenda]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprAgenda_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Agenda]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprAgenda_SelectAllByIdRes = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[IdRes]
			,[IdEven]
			,[Fecha]
			FROM [dbo].[Agenda]
			WHERE 
			[IdRes] = @IdRes
			";

		internal static string ctprAgenda_SelectAllByIdResCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Agenda]
			WHERE 
			[IdRes] = @IdRes
			";

		internal static string ctprAgenda_DeleteAllByIdRes = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Agenda]
			WHERE 
			[IdRes] = @IdRes
			";

		internal static string ctprAgenda_SelectAllByIdEven = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[IdRes]
			,[IdEven]
			,[Fecha]
			FROM [dbo].[Agenda]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprAgenda_SelectAllByIdEvenCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Agenda]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprAgenda_DeleteAllByIdEven = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Agenda]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprAgenda_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Agenda]
			(
			[IdRes]
			,[IdEven]
			,[Fecha]
			)
			VALUES
			(
			@IdRes
			,@IdEven
			,@Fecha
			)
			SELECT 
			@Id = [Id]
			,@IdRes = [IdRes]
			,@IdEven = [IdEven]
			,@Fecha = [Fecha]
			FROM [dbo].[Agenda]
			WHERE 
			Id = SCOPE_IDENTITY()
			";

		internal static string ctprAgenda_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Id]
			,[IdRes]
			,[IdEven]
			,[Fecha]
			FROM [dbo].[Agenda]
			";

		internal static string ctprAgenda_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Agenda]
			";

		internal static string ctprAgenda_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Id],
			[IdRes],
			[IdEven],
			[Fecha]
			FROM [dbo].[Agenda]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([IdRes] LIKE @IdRes OR @IdRes is null)
			AND ([IdEven] LIKE @IdEven OR @IdEven is null)
			AND ([Fecha] LIKE @Fecha OR @Fecha is null)
			";

		internal static string ctprAgenda_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[Agenda]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([IdRes] LIKE @IdRes OR @IdRes is null)
			AND ([IdEven] LIKE @IdEven OR @IdEven is null)
			AND ([Fecha] LIKE @Fecha OR @Fecha is null)
			";

		internal static string ctprAgenda_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Agenda]
			SET
			[IdRes] = @IdRes
			,[IdEven] = @IdEven
			,[Fecha] = @Fecha
			WHERE 
			[Id] = @Id
			SELECT 
			@Id = [Id]
			,@IdRes = [IdRes]
			,@IdEven = [IdEven]
			,@Fecha = [Fecha]
			FROM [dbo].[Agenda]
			WHERE 
			[Id] = @Id
			";

	}
}
#endregion
