/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOUtilizaEE : DATACONN0_BaseData
	{
		#region member variables
		protected Int32? _idEven;
		protected Int16? _idEq;
		#endregion

		#region class methods
		public DAOUtilizaEE()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table UtilizaEE based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOUtilizaEE
		///</returns>
		///<parameters>
		///Int32? idEven, Int16? idEq
		///</parameters>
		public static DAOUtilizaEE SelectOne(Int32? idEven, Int16? idEq)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("UtilizaEE");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEq", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idEq?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOUtilizaEE retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOUtilizaEE();
					retObj._idEven					 = Convert.IsDBNull(dt.Rows[0]["IdEven"]) ? (Int32?)null : (Int32?)dt.Rows[0]["IdEven"];
					retObj._idEq					 = Convert.IsDBNull(dt.Rows[0]["IdEq"]) ? (Int16?)null : (Int16?)dt.Rows[0]["IdEq"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table UtilizaEE based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEq", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)_idEq?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table UtilizaEE based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOUtilizaEE.
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static List<DAOUtilizaEE> SelectAllByIdEven(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_SelectAllByIdEven;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("UtilizaEE");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOUtilizaEE> objList = new List<DAOUtilizaEE>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOUtilizaEE retObj = new DAOUtilizaEE();
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._idEq					 = Convert.IsDBNull(row["IdEq"]) ? (Int16?)null : (Int16?)row["IdEq"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? idEven
		///</parameters>
		public static Int32 SelectAllByIdEvenCount(Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_SelectAllByIdEvenCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table UtilizaEE with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven
		///</parameters>
		public static void DeleteAllByIdEven(DATACONN0_TxConnectionProvider connectionProvider, Int32? idEven)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_DeleteAllByIdEven;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)idEven?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table UtilizaEE based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOUtilizaEE.
		///</returns>
		///<parameters>
		///Int16? idEq
		///</parameters>
		public static List<DAOUtilizaEE> SelectAllByIdEq(Int16? idEq)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_SelectAllByIdEq;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("UtilizaEE");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdEq", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idEq?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOUtilizaEE> objList = new List<DAOUtilizaEE>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOUtilizaEE retObj = new DAOUtilizaEE();
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._idEq					 = Convert.IsDBNull(row["IdEq"]) ? (Int16?)null : (Int16?)row["IdEq"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int16? idEq
		///</parameters>
		public static Int32 SelectAllByIdEqCount(Int16? idEq)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_SelectAllByIdEqCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEq", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idEq?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table UtilizaEE with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int16? idEq
		///</parameters>
		public static void DeleteAllByIdEq(DATACONN0_TxConnectionProvider connectionProvider, Int16? idEq)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_DeleteAllByIdEq;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEq", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idEq?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table UtilizaEE
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_idEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEq", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_idEq?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table UtilizaEE
		///</Summary>
		///<returns>
		///List-DAOUtilizaEE.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOUtilizaEE> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("UtilizaEE");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOUtilizaEE> objList = new List<DAOUtilizaEE>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOUtilizaEE retObj = new DAOUtilizaEE();
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._idEq					 = Convert.IsDBNull(row["IdEq"]) ? (Int16?)null : (Int16?)row["IdEq"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOUtilizaEE.
		///</returns>
		///<parameters>
		///DAOUtilizaEE daoUtilizaEE
		///</parameters>
		public static List<DAOUtilizaEE> SelectAllBySearchFields(DAOUtilizaEE daoUtilizaEE)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("UtilizaEE");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoUtilizaEE.IdEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEq", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoUtilizaEE.IdEq?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOUtilizaEE> objList = new List<DAOUtilizaEE>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOUtilizaEE retObj = new DAOUtilizaEE();
						retObj._idEven					 = Convert.IsDBNull(row["IdEven"]) ? (Int32?)null : (Int32?)row["IdEven"];
						retObj._idEq					 = Convert.IsDBNull(row["IdEq"]) ? (Int16?)null : (Int16?)row["IdEq"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOUtilizaEE daoUtilizaEE
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOUtilizaEE daoUtilizaEE)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprUtilizaEE_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdEven", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoUtilizaEE.IdEven?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdEq", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoUtilizaEE.IdEq?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? IdEven
		{
			get
			{
				return _idEven;
			}
			set
			{
				_idEven = value;
			}
		}

		public Int16? IdEq
		{
			get
			{
				return _idEq;
			}
			set
			{
				_idEq = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprUtilizaEE_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[IdEven]
			,[IdEq]
			FROM [dbo].[UtilizaEE]
			WHERE 
			[IdEven] = @IdEven
			AND [IdEq] = @IdEq
			";

		internal static string ctprUtilizaEE_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[UtilizaEE]
			WHERE 
			[IdEven] = @IdEven
			AND [IdEq] = @IdEq
			";

		internal static string ctprUtilizaEE_SelectAllByIdEven = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[IdEven]
			,[IdEq]
			FROM [dbo].[UtilizaEE]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprUtilizaEE_SelectAllByIdEvenCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[UtilizaEE]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprUtilizaEE_DeleteAllByIdEven = @"
			
			-- delete all matching from the table
			DELETE [dbo].[UtilizaEE]
			WHERE 
			[IdEven] = @IdEven
			";

		internal static string ctprUtilizaEE_SelectAllByIdEq = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[IdEven]
			,[IdEq]
			FROM [dbo].[UtilizaEE]
			WHERE 
			[IdEq] = @IdEq
			";

		internal static string ctprUtilizaEE_SelectAllByIdEqCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[UtilizaEE]
			WHERE 
			[IdEq] = @IdEq
			";

		internal static string ctprUtilizaEE_DeleteAllByIdEq = @"
			
			-- delete all matching from the table
			DELETE [dbo].[UtilizaEE]
			WHERE 
			[IdEq] = @IdEq
			";

		internal static string ctprUtilizaEE_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[UtilizaEE]
			(
			[IdEven]
			,[IdEq]
			)
			VALUES
			(
			@IdEven
			,@IdEq
			)
			SELECT 
			@IdEven = [IdEven]
			,@IdEq = [IdEq]
			FROM [dbo].[UtilizaEE]
			WHERE 
			[IdEven] = @IdEven
			AND [IdEq] = @IdEq
			";

		internal static string ctprUtilizaEE_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[IdEven]
			,[IdEq]
			FROM [dbo].[UtilizaEE]
			";

		internal static string ctprUtilizaEE_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[UtilizaEE]
			";

		internal static string ctprUtilizaEE_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[IdEven],
			[IdEq]
			FROM [dbo].[UtilizaEE]
			WHERE 
			([IdEven] LIKE @IdEven OR @IdEven is null)
			AND ([IdEq] LIKE @IdEq OR @IdEq is null)
			";

		internal static string ctprUtilizaEE_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[UtilizaEE]
			WHERE 
			([IdEven] LIKE @IdEven OR @IdEven is null)
			AND ([IdEq] LIKE @IdEq OR @IdEq is null)
			";

	}
}
#endregion
