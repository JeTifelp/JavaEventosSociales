/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOPaquete : DATACONN0_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected string _nombre;
		protected decimal? _precio;
		protected decimal? _descuento;
		protected decimal? _precioTotal;
		protected bool? _generico;
		#endregion

		#region class methods
		public DAOPaquete()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Paquete based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOPaquete
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAOPaquete SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Paquete");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOPaquete retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOPaquete();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Id"];
					retObj._nombre					 = Convert.IsDBNull(dt.Rows[0]["Nombre"]) ? null : (string)dt.Rows[0]["Nombre"];
					retObj._precio					 = Convert.IsDBNull(dt.Rows[0]["Precio"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Precio"];
					retObj._descuento					 = Convert.IsDBNull(dt.Rows[0]["Descuento"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Descuento"];
					retObj._precioTotal					 = Convert.IsDBNull(dt.Rows[0]["PrecioTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["PrecioTotal"];
					retObj._generico					 = Convert.IsDBNull(dt.Rows[0]["Generico"]) ? (bool?)null : (bool?)dt.Rows[0]["Generico"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Paquete based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select one row by unique constraint
		///This method returns one row from the table Paquete based on a unique constraint
		///</Summary>
		///<returns>
		///DAOPaquete
		///</returns>
		///<parameters>
		///string nombre
		///</parameters>
		public static DAOPaquete SelectOneByNombre(string nombre)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_SelectOneByNombre;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Paquete");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)nombre?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOPaquete retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOPaquete();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Id"];
					retObj._nombre					 = Convert.IsDBNull(dt.Rows[0]["Nombre"]) ? null : (string)dt.Rows[0]["Nombre"];
					retObj._precio					 = Convert.IsDBNull(dt.Rows[0]["Precio"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Precio"];
					retObj._descuento					 = Convert.IsDBNull(dt.Rows[0]["Descuento"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Descuento"];
					retObj._precioTotal					 = Convert.IsDBNull(dt.Rows[0]["PrecioTotal"]) ? (decimal?)null : (decimal?)dt.Rows[0]["PrecioTotal"];
					retObj._generico					 = Convert.IsDBNull(dt.Rows[0]["Generico"]) ? (bool?)null : (bool?)dt.Rows[0]["Generico"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by unique constraint
		///This method deletes one row from the table Paquete based on a unique constraint
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string nombre
		///</parameters>
		public virtual void DeleteOneByNombre(string nombre)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_DeleteOneByNombre;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_nombre?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Paquete
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_nombre?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Precio", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_precio?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descuento", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_descuento?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@PrecioTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_precioTotal?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Generico", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_generico?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id = (Int32?)command.Parameters["@Id"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Paquete
		///</Summary>
		///<returns>
		///List-DAOPaquete.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOPaquete> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Paquete");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOPaquete> objList = new List<DAOPaquete>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPaquete retObj = new DAOPaquete();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._nombre					 = Convert.IsDBNull(row["Nombre"]) ? null : (string)row["Nombre"];
						retObj._precio					 = Convert.IsDBNull(row["Precio"]) ? (decimal?)null : (decimal?)row["Precio"];
						retObj._descuento					 = Convert.IsDBNull(row["Descuento"]) ? (decimal?)null : (decimal?)row["Descuento"];
						retObj._precioTotal					 = Convert.IsDBNull(row["PrecioTotal"]) ? (decimal?)null : (decimal?)row["PrecioTotal"];
						retObj._generico					 = Convert.IsDBNull(row["Generico"]) ? (bool?)null : (bool?)row["Generico"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOPaquete.
		///</returns>
		///<parameters>
		///DAOPaquete daoPaquete
		///</parameters>
		public static List<DAOPaquete> SelectAllBySearchFields(DAOPaquete daoPaquete)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Paquete");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoPaquete.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoPaquete.Nombre?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Precio", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoPaquete.Precio?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descuento", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoPaquete.Descuento?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@PrecioTotal", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoPaquete.PrecioTotal?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Generico", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoPaquete.Generico?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOPaquete> objList = new List<DAOPaquete>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPaquete retObj = new DAOPaquete();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._nombre					 = Convert.IsDBNull(row["Nombre"]) ? null : (string)row["Nombre"];
						retObj._precio					 = Convert.IsDBNull(row["Precio"]) ? (decimal?)null : (decimal?)row["Precio"];
						retObj._descuento					 = Convert.IsDBNull(row["Descuento"]) ? (decimal?)null : (decimal?)row["Descuento"];
						retObj._precioTotal					 = Convert.IsDBNull(row["PrecioTotal"]) ? (decimal?)null : (decimal?)row["PrecioTotal"];
						retObj._generico					 = Convert.IsDBNull(row["Generico"]) ? (bool?)null : (bool?)row["Generico"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOPaquete daoPaquete
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOPaquete daoPaquete)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoPaquete.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoPaquete.Nombre?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Precio", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoPaquete.Precio?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descuento", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoPaquete.Descuento?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@PrecioTotal", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, "", DataRowVersion.Proposed, (object)daoPaquete.PrecioTotal?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Generico", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoPaquete.Generico?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Paquete based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprPaquete_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_nombre?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Precio", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_precio?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descuento", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_descuento?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@PrecioTotal", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 10, 2, "", DataRowVersion.Proposed, (object)_precioTotal?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Generico", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_generico?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id = (Int32?)command.Parameters["@Id"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public string Nombre
		{
			get
			{
				return _nombre;
			}
			set
			{
				_nombre = value;
			}
		}

		public decimal? Precio
		{
			get
			{
				return _precio;
			}
			set
			{
				_precio = value;
			}
		}

		public decimal? Descuento
		{
			get
			{
				return _descuento;
			}
			set
			{
				_descuento = value;
			}
		}

		public decimal? PrecioTotal
		{
			get
			{
				return _precioTotal;
			}
			set
			{
				_precioTotal = value;
			}
		}

		public bool? Generico
		{
			get
			{
				return _generico;
			}
			set
			{
				_generico = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprPaquete_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Nombre]
			,[Precio]
			,[Descuento]
			,[PrecioTotal]
			,[Generico]
			FROM [dbo].[Paquete]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprPaquete_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Paquete]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprPaquete_SelectOneByNombre = @"
			-- Select one row by a unique constraint
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Nombre]
			,[Precio]
			,[Descuento]
			,[PrecioTotal]
			,[Generico]
			FROM [dbo].[Paquete]
			WHERE 
			[Nombre] = @Nombre
			";

		internal static string ctprPaquete_DeleteOneByNombre = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Paquete]
			WHERE 
			[Nombre] = @Nombre
			";

		internal static string ctprPaquete_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Paquete]
			(
			[Nombre]
			,[Precio]
			,[Descuento]
			,[PrecioTotal]
			,[Generico]
			)
			VALUES
			(
			@Nombre
			,@Precio
			,@Descuento
			,@PrecioTotal
			,@Generico
			)
			SELECT 
			@Id = [Id]
			,@Nombre = [Nombre]
			,@Precio = [Precio]
			,@Descuento = [Descuento]
			,@PrecioTotal = [PrecioTotal]
			,@Generico = [Generico]
			FROM [dbo].[Paquete]
			WHERE 
			Id = SCOPE_IDENTITY()
			";

		internal static string ctprPaquete_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Nombre]
			,[Precio]
			,[Descuento]
			,[PrecioTotal]
			,[Generico]
			FROM [dbo].[Paquete]
			";

		internal static string ctprPaquete_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Paquete]
			";

		internal static string ctprPaquete_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Id],
			[Nombre],
			[Precio],
			[Descuento],
			[PrecioTotal],
			[Generico]
			FROM [dbo].[Paquete]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([Nombre] LIKE @Nombre OR @Nombre is null)
			AND ([Precio] LIKE @Precio OR @Precio is null)
			AND ([Descuento] LIKE @Descuento OR @Descuento is null)
			AND ([PrecioTotal] LIKE @PrecioTotal OR @PrecioTotal is null)
			AND ([Generico] LIKE @Generico OR @Generico is null)
			";

		internal static string ctprPaquete_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[Paquete]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([Nombre] LIKE @Nombre OR @Nombre is null)
			AND ([Precio] LIKE @Precio OR @Precio is null)
			AND ([Descuento] LIKE @Descuento OR @Descuento is null)
			AND ([PrecioTotal] LIKE @PrecioTotal OR @PrecioTotal is null)
			AND ([Generico] LIKE @Generico OR @Generico is null)
			";

		internal static string ctprPaquete_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Paquete]
			SET
			[Nombre] = @Nombre
			,[Precio] = @Precio
			,[Descuento] = @Descuento
			,[PrecioTotal] = @PrecioTotal
			,[Generico] = @Generico
			WHERE 
			[Id] = @Id
			SELECT 
			@Id = [Id]
			,@Nombre = [Nombre]
			,@Precio = [Precio]
			,@Descuento = [Descuento]
			,@PrecioTotal = [PrecioTotal]
			,@Generico = [Generico]
			FROM [dbo].[Paquete]
			WHERE 
			[Id] = @Id
			";

	}
}
#endregion
