/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace studio.DataObjects
{
	public partial class DAOEvento : DATACONN0_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected DateTime? _fecha;
		protected string _descripcion;
		protected TimeSpan? _hora;
		protected Int16? _idTE;
		protected decimal? _latitud;
		protected decimal? _longitud;
		#endregion

		#region class methods
		public DAOEvento()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Evento based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOEvento
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAOEvento SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Evento");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DAOEvento retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOEvento();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Id"];
					retObj._fecha					 = Convert.IsDBNull(dt.Rows[0]["Fecha"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["Fecha"];
					retObj._descripcion					 = Convert.IsDBNull(dt.Rows[0]["Descripcion"]) ? null : (string)dt.Rows[0]["Descripcion"];
					retObj._hora					 = Convert.IsDBNull(dt.Rows[0]["Hora"]) ? (TimeSpan?)null : (TimeSpan?)dt.Rows[0]["Hora"];
					retObj._idTE					 = Convert.IsDBNull(dt.Rows[0]["IdTE"]) ? (Int16?)null : (Int16?)dt.Rows[0]["IdTE"];
					retObj._latitud					 = Convert.IsDBNull(dt.Rows[0]["Latitud"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Latitud"];
					retObj._longitud					 = Convert.IsDBNull(dt.Rows[0]["Longitud"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Longitud"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Evento based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Evento based on a foreign key
		///</Summary>
		///<returns>
		///List-DAOEvento.
		///</returns>
		///<parameters>
		///Int16? idTE
		///</parameters>
		public static List<DAOEvento> SelectAllByIdTE(Int16? idTE)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_SelectAllByIdTE;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Evento");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@IdTE", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idTE?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOEvento> objList = new List<DAOEvento>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEvento retObj = new DAOEvento();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						retObj._hora					 = Convert.IsDBNull(row["Hora"]) ? (TimeSpan?)null : (TimeSpan?)row["Hora"];
						retObj._idTE					 = Convert.IsDBNull(row["IdTE"]) ? (Int16?)null : (Int16?)row["IdTE"];
						retObj._latitud					 = Convert.IsDBNull(row["Latitud"]) ? (decimal?)null : (decimal?)row["Latitud"];
						retObj._longitud					 = Convert.IsDBNull(row["Longitud"]) ? (decimal?)null : (decimal?)row["Longitud"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int16? idTE
		///</parameters>
		public static Int32 SelectAllByIdTECount(Int16? idTE)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_SelectAllByIdTECount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdTE", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idTE?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Evento with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DATACONN0_TxConnectionProvider connectionProvider, Int16? idTE
		///</parameters>
		public static void DeleteAllByIdTE(DATACONN0_TxConnectionProvider connectionProvider, Int16? idTE)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_DeleteAllByIdTE;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@IdTE", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)idTE?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Evento
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_fecha?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_descripcion?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Hora", SqlDbType.Time, 5, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_hora?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdTE", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_idTE?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Latitud", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 15, 2, "", DataRowVersion.Proposed, (object)_latitud?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Longitud", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 15, 2, "", DataRowVersion.Proposed, (object)_longitud?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Evento
		///</Summary>
		///<returns>
		///List-DAOEvento.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DAOEvento> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Evento");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOEvento> objList = new List<DAOEvento>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEvento retObj = new DAOEvento();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						retObj._hora					 = Convert.IsDBNull(row["Hora"]) ? (TimeSpan?)null : (TimeSpan?)row["Hora"];
						retObj._idTE					 = Convert.IsDBNull(row["IdTE"]) ? (Int16?)null : (Int16?)row["IdTE"];
						retObj._latitud					 = Convert.IsDBNull(row["Latitud"]) ? (decimal?)null : (decimal?)row["Latitud"];
						retObj._longitud					 = Convert.IsDBNull(row["Longitud"]) ? (decimal?)null : (decimal?)row["Longitud"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///List-DAOEvento.
		///</returns>
		///<parameters>
		///DAOEvento daoEvento
		///</parameters>
		public static List<DAOEvento> SelectAllBySearchFields(DAOEvento daoEvento)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Evento");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoEvento.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoEvento.Fecha?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoEvento.Descripcion?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Hora", SqlDbType.Time, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoEvento.Hora?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdTE", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoEvento.IdTE?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Latitud", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 15, 2, "", DataRowVersion.Proposed, (object)daoEvento.Latitud?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Longitud", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 15, 2, "", DataRowVersion.Proposed, (object)daoEvento.Longitud?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DAOEvento> objList = new List<DAOEvento>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEvento retObj = new DAOEvento();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._fecha					 = Convert.IsDBNull(row["Fecha"]) ? (DateTime?)null : (DateTime?)row["Fecha"];
						retObj._descripcion					 = Convert.IsDBNull(row["Descripcion"]) ? null : (string)row["Descripcion"];
						retObj._hora					 = Convert.IsDBNull(row["Hora"]) ? (TimeSpan?)null : (TimeSpan?)row["Hora"];
						retObj._idTE					 = Convert.IsDBNull(row["IdTE"]) ? (Int16?)null : (Int16?)row["IdTE"];
						retObj._latitud					 = Convert.IsDBNull(row["Latitud"]) ? (decimal?)null : (decimal?)row["Latitud"];
						retObj._longitud					 = Convert.IsDBNull(row["Longitud"]) ? (decimal?)null : (decimal?)row["Longitud"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOEvento daoEvento
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOEvento daoEvento)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoEvento.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoEvento.Fecha?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoEvento.Descripcion?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Hora", SqlDbType.Time, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoEvento.Hora?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdTE", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, (object)daoEvento.IdTE?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Latitud", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 15, 2, "", DataRowVersion.Proposed, (object)daoEvento.Latitud?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Longitud", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 15, 2, "", DataRowVersion.Proposed, (object)daoEvento.Longitud?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Evento based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEvento_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Fecha", SqlDbType.DateTime, 3, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_fecha?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Descripcion", SqlDbType.VarChar, 4000, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_descripcion?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Hora", SqlDbType.Time, 5, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_hora?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@IdTE", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_idTE?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Latitud", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 15, 2, "", DataRowVersion.Proposed, (object)_latitud?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Longitud", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, true, 15, 2, "", DataRowVersion.Proposed, (object)_longitud?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public DateTime? Fecha
		{
			get
			{
				return _fecha;
			}
			set
			{
				_fecha = value;
			}
		}

		public string Descripcion
		{
			get
			{
				return _descripcion;
			}
			set
			{
				_descripcion = value;
			}
		}

		public TimeSpan? Hora
		{
			get
			{
				return _hora;
			}
			set
			{
				_hora = value;
			}
		}

		public Int16? IdTE
		{
			get
			{
				return _idTE;
			}
			set
			{
				_idTE = value;
			}
		}

		public decimal? Latitud
		{
			get
			{
				return _latitud;
			}
			set
			{
				_latitud = value;
			}
		}

		public decimal? Longitud
		{
			get
			{
				return _longitud;
			}
			set
			{
				_longitud = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace studio.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprEvento_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Fecha]
			,[Descripcion]
			,[Hora]
			,[IdTE]
			,[Latitud]
			,[Longitud]
			FROM [dbo].[Evento]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprEvento_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Evento]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprEvento_SelectAllByIdTE = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Fecha]
			,[Descripcion]
			,[Hora]
			,[IdTE]
			,[Latitud]
			,[Longitud]
			FROM [dbo].[Evento]
			WHERE 
			[IdTE] = @IdTE
			";

		internal static string ctprEvento_SelectAllByIdTECount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Evento]
			WHERE 
			[IdTE] = @IdTE
			";

		internal static string ctprEvento_DeleteAllByIdTE = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Evento]
			WHERE 
			[IdTE] = @IdTE
			";

		internal static string ctprEvento_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Evento]
			(
			[Id]
			,[Fecha]
			,[Descripcion]
			,[Hora]
			,[IdTE]
			,[Latitud]
			,[Longitud]
			)
			VALUES
			(
			@Id
			,@Fecha
			,@Descripcion
			,@Hora
			,@IdTE
			,@Latitud
			,@Longitud
			)
			SELECT 
			@Id = [Id]
			,@Fecha = [Fecha]
			,@Descripcion = [Descripcion]
			,@Hora = [Hora]
			,@IdTE = [IdTE]
			,@Latitud = [Latitud]
			,@Longitud = [Longitud]
			FROM [dbo].[Evento]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprEvento_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Fecha]
			,[Descripcion]
			,[Hora]
			,[IdTE]
			,[Latitud]
			,[Longitud]
			FROM [dbo].[Evento]
			";

		internal static string ctprEvento_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Evento]
			";

		internal static string ctprEvento_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Id],
			[Fecha],
			[Descripcion],
			[Hora],
			[IdTE],
			[Latitud],
			[Longitud]
			FROM [dbo].[Evento]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([Fecha] LIKE @Fecha OR @Fecha is null)
			AND ([Descripcion] LIKE @Descripcion OR @Descripcion is null)
			AND ([Hora] LIKE @Hora OR @Hora is null)
			AND ([IdTE] LIKE @IdTE OR @IdTE is null)
			AND ([Latitud] LIKE @Latitud OR @Latitud is null)
			AND ([Longitud] LIKE @Longitud OR @Longitud is null)
			";

		internal static string ctprEvento_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[Evento]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([Fecha] LIKE @Fecha OR @Fecha is null)
			AND ([Descripcion] LIKE @Descripcion OR @Descripcion is null)
			AND ([Hora] LIKE @Hora OR @Hora is null)
			AND ([IdTE] LIKE @IdTE OR @IdTE is null)
			AND ([Latitud] LIKE @Latitud OR @Latitud is null)
			AND ([Longitud] LIKE @Longitud OR @Longitud is null)
			";

		internal static string ctprEvento_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Evento]
			SET
			[Fecha] = @Fecha
			,[Descripcion] = @Descripcion
			,[Hora] = @Hora
			,[IdTE] = @IdTE
			,[Latitud] = @Latitud
			,[Longitud] = @Longitud
			WHERE 
			[Id] = @Id
			SELECT 
			@Id = [Id]
			,@Fecha = [Fecha]
			,@Descripcion = [Descripcion]
			,@Hora = [Hora]
			,@IdTE = [IdTE]
			,@Latitud = [Latitud]
			,@Longitud = [Longitud]
			FROM [dbo].[Evento]
			WHERE 
			[Id] = @Id
			";

	}
}
#endregion
