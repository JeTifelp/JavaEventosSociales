/*************************************************************
** Class generated by CodeTrigger, Version 4.3.0.6
** CodeTrigger is an Exotechnic Corporation (UK) Ltd Product 
** This class was generated on 08/06/2014 17:05:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using studio.DataObjects;

namespace studio.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BODirecciones.
	///</Summary>
	public partial class BODirecciones : DATACONN0_BaseBusiness
	{
		#region member variables
		protected Int32? _idEven;
		protected string _descripcion;
		protected string _direccion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BODirecciones()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 idEven, string descripcion
		///</parameters>
		public BODirecciones(Int32 idEven, string descripcion)
		{
			try
			{
				DAODirecciones daoDirecciones = DAODirecciones.SelectOne(idEven, descripcion);
				_idEven = daoDirecciones.IdEven;
				_descripcion = daoDirecciones.Descripcion;
				_direccion = daoDirecciones.Direccion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAODirecciones
		///</parameters>
		protected internal BODirecciones(DAODirecciones daoDirecciones)
		{
			try
			{
				_idEven = daoDirecciones.IdEven;
				_descripcion = daoDirecciones.Descripcion;
				_direccion = daoDirecciones.Direccion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Direcciones record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAODirecciones daoDirecciones = new DAODirecciones();
			RegisterDataObject(daoDirecciones);
			BeginTransaction("savenewBODirecciones");
			try
			{
				daoDirecciones.IdEven = _idEven;
				daoDirecciones.Descripcion = _descripcion;
				daoDirecciones.Direccion = _direccion;
				daoDirecciones.Insert();
				CommitTransaction();
				
				_idEven = daoDirecciones.IdEven;
				_descripcion = daoDirecciones.Descripcion;
				_direccion = daoDirecciones.Direccion;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBODirecciones");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Direcciones record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BODirecciones
		///</parameters>
		public virtual void Update()
		{
			DAODirecciones daoDirecciones = new DAODirecciones();
			RegisterDataObject(daoDirecciones);
			BeginTransaction("updateBODirecciones");
			try
			{
				daoDirecciones.IdEven = _idEven;
				daoDirecciones.Descripcion = _descripcion;
				daoDirecciones.Direccion = _direccion;
				daoDirecciones.Update();
				CommitTransaction();
				
				_idEven = daoDirecciones.IdEven;
				_descripcion = daoDirecciones.Descripcion;
				_direccion = daoDirecciones.Direccion;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBODirecciones");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Direcciones record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAODirecciones daoDirecciones = new DAODirecciones();
			RegisterDataObject(daoDirecciones);
			BeginTransaction("deleteBODirecciones");
			try
			{
				daoDirecciones.IdEven = _idEven;
				daoDirecciones.Descripcion = _descripcion;
				daoDirecciones.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBODirecciones");
				throw;
			}
		}
		
		///<Summary>
		///DireccionesCollection
		///This method returns the collection of BODirecciones objects
		///</Summary>
		///<returns>
		///List[BODirecciones]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<BODirecciones> DireccionesCollection()
		{
			List<BODirecciones> boDireccionesCollection = new List<BODirecciones>();
			List<DAODirecciones> daoDireccionesCollection = DAODirecciones.SelectAll();
			
			foreach(DAODirecciones daoDirecciones in daoDireccionesCollection)
				boDireccionesCollection.Add(new BODirecciones(daoDirecciones));
			
			 return boDireccionesCollection;
			
		}
		
		
		///<Summary>
		///DireccionesCollectionCount
		///This method returns the collection count of BODirecciones objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DireccionesCollectionCount()
		{
			Int32 objCount = DAODirecciones.SelectAllCount();
			return objCount;
			
		}
		
		
		public static List<BODirecciones> DireccionesCollectionFromSearchFields(BODirecciones boDirecciones)
		{
			List<BODirecciones> boDireccionesCollection = new List<BODirecciones>();
			DAODirecciones daoDirecciones = new DAODirecciones();
			daoDirecciones.IdEven = boDirecciones.IdEven;
			daoDirecciones.Descripcion = boDirecciones.Descripcion;
			daoDirecciones.Direccion = boDirecciones.Direccion;
			List<DAODirecciones> daoDireccionesCollection = DAODirecciones.SelectAllBySearchFields(daoDirecciones);
			
			foreach(DAODirecciones resdaoDirecciones in daoDireccionesCollection)
				boDireccionesCollection.Add(new BODirecciones(resdaoDirecciones));
			
			return boDireccionesCollection;
			
		}
		
		
		public static Int32 DireccionesCollectionFromSearchFieldsCount(BODirecciones boDirecciones)
		{
			DAODirecciones daoDirecciones = new DAODirecciones();
			daoDirecciones.IdEven = boDirecciones.IdEven;
			daoDirecciones.Descripcion = boDirecciones.Descripcion;
			daoDirecciones.Direccion = boDirecciones.Direccion;
			Int32 objCount = DAODirecciones.SelectAllBySearchFieldsCount(daoDirecciones);
			
			return objCount;
			
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? IdEven
		{
			get
			{
				 return _idEven;
			}
			set
			{
				_idEven = value;
				_isDirty = true;
			}
		}
		
		public virtual string Descripcion
		{
			get
			{
				 return _descripcion;
			}
			set
			{
				_descripcion = value;
				_isDirty = true;
			}
		}
		
		public virtual string Direccion
		{
			get
			{
				 return _direccion;
			}
			set
			{
				_direccion = value;
				_isDirty = true;
			}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
